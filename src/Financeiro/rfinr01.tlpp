#INCLUDE "PROTHEUS.CH"
#INCLUDE "RWMAKE.CH"

#DEFINE NFIMLIN		170

Static lBoletoPDF	:= GetMv("ES_BOLPDF",, .F.) as logical	//Verifica se o tipo de mensagem selecionado [ Imprimir / Envio] caso seja envio gera um arquivo PDF
// Static lEnvioBol	:= GetMv("ES_MAILBOL",, .F.) as logical	//Verifica se o tipo selecionado na mensagem e envio de [ Boleto ]
// Static lEnvBolNF	:= lBoletoPDF .AND. lEnvioBol as logical	//Verifica se o tipo selecionado na mensagem e envio de [ Boleto + Nota Fiscal ]

/*/{Protheus.doc} RFINR01
	(Rotina que centraliza as funcoes de impressao de Boletos)
	@type User Function
	@author Calabró
	@since 14/03/2019
	@version 1.0
	@param cCodEmp, character, (Empresa a ser considerada)
	@param cCodFil, character, (Filial da empresa a ser considerada)
	@param cNumTit, character, (Numero do titulo)
	@param cPrefixo, character, (Numero do prefixo do titulo)
	@return cFilePrint, character, (Caminho do arquivo PDF gerado, caso gere com sucesso)
	@example
	(examples)
	@see (links_or_references)
	/*/

User Function RFINR01(aParams as array)

Local cFilePrint	:= "" as character
Local cCodEmp		:= "" as character
Local cCodFil		:= "" as character
Local cNumTit		:= "" as character
Local cPrefixo		:= "" as character

Local lForceEnv		:= Empty(FunName()) as logical			//Verifica se ambiente foi inicializado
Local lRet			:= .T. as logical						//controle de retorno de processo

Local aAreas		:= {} as array

Default aParams		:= {}

If Len(aParams) > 0

	cCodEmp := aParams[1]
	cCodFil := aParams[2]
	cNumTit := aParams[3]
	cPrefixo := aParams[4]

	//Se nao existe ambiente, monto novo ambiente
	If lForceEnv
		RpcSetType(3)
		RpcSetEnv(cCodEmp, cCodFil,,,"FIN",,{"SE1"})
	EndIf

	aAreas 	:= {SE1->(GetArea()), GetArea()}

	DbSelectArea("SE1")
	DbSetOrder(1)
	If SE1->(DbSeek(xFilial("SE1")+cPrefixo+cNumTit)) .OR. !IsBlind()
		cFilePrint := ExecBoleto(cPrefixo, cNumTit, @lRet, IsBlind())
	EndIf

	// Finalizo ambiente se for job
	If lForceEnv
		RpcClearEnv()
	EndIf

	aEval(aAreas, {|x| RestArea(x) })
EndIf

Return cFilePrint

/*/{Protheus.doc} ExecBoleto
	(Rotina que executa a impressao de Boletos)
	@type Static Function
	@author Calabró
	@since 14/03/2019
	@version 1.0
	@param cNumTit, character, (Numero do titulo)
	@param cPrefixo, character, (Numero do prefixo do titulo)
	@param lRet, logical, (Variavel de retorno com sucesso (.T.) ou falha (.F.) da geracao do boleto)
	@param lJob, logical, (Variavel de controle para identificar se processo esta em job ou nao)
	@return cFilePrint, character, (Caminho do arquivo PDF gerado, caso gere com sucesso)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function ExecBoleto(cPrefixo as character, cNumTit as character, lRet as logical, lJob as logical)

Local cMsg			:= "" as character
// Local __cNomBcoL	:= "" as character
Local cFilePrint	:= "" as character
Local cIndexName	:= '' as character
Local cIndexKey		:= '' as character
Local cFilter		:= '' as character

Local nOpc			:= 0 as numeric

Local aPergs		:= {} as array
Local aRet			:= {} as array
Local aBancos		:= {} as array
Local aDimTela		:= MsAdvSize() as array		//Array com as dimensoes da tela

Local oTPnlRodap	:= Nil as object

Private cChaveBanco := "" as character
Private cMod11		:= " " as character
Private cBanco		:= "" as character
Private __cBanco	:= "" as character
Private cMarca		:= GetMark() as character

Private lExec		:= .F. as logical	

Private oDlg		:= Nil as object

//Preenche as opcoes de Banco
aAdd(aBancos,"001 - Banco Do Brasil")
aAdd(aBancos,"033 - Banco Santander")
aAdd(aBancos,"237 - Banco Bradesco")
aAdd(aBancos,"341 - Banco Itau")
aAdd(aBancos,"422 - Banco Safra")
aAdd(aBancos,"637 - Banco Sofisa")

Tamanho  := "M"
titulo   := "Impressao de Boleto com Codigo de Barras"
cDesc1   := "Este programa destina-se a impressao do Boleto com Codigo de Barras."
cDesc2   := ""
cDesc3   := ""
cString  := "SE1"
wnrel    := "BOLETO"
lEnd     := .F.
cPerg    := PADR("RFINR01",10)
aReturn  := {"Zebrado", 1,"Administracao", 2, 2, 1, "",1 }
nLastKey := 0

dbSelectArea("SE1")

aPergs := MyPerg()

//Preenche parametros para rotina utilizar envio de boleto automatico
If lJob

	MV_PAR01 := SE1->E1_PREFIXO
	MV_PAR02 := SE1->E1_PREFIXO
	MV_PAR03 := SE1->E1_NUM
	MV_PAR04 := SE1->E1_NUM
	MV_PAR05 := ""
	MV_PAR06 := "Z"
	MV_PAR07 := ""
	MV_PAR08 := "ZZZ"
	MV_PAR09 := ""
	MV_PAR10 := "ZZZZZZ"
	MV_PAR11 := ""
	MV_PAR12 := "ZZ"
	MV_PAR13 := SE1->E1_EMIS1
	MV_PAR14 := SE1->E1_EMIS1
	MV_PAR15 := SE1->E1_VENCREA
	MV_PAR16 := SE1->E1_VENCREA
	MV_PAR17 := ""
	MV_PAR18 := "ZZZZZZ"
	MV_PAR19 := ""
	MV_PAR20 := ""
	MV_PAR21 := ""

	//Define variaveis Private com conteudo para geracao de boleto em job
	// If IsInCallStack ("U_RFATA00")
	// 	cBanco := __cBanco := "237"
	// EndIf
// Else
// 	MyPerg()
EndIf

If Len(aPergs) > 0 .OR. lJob

	cIndexName	:= Criatrab(Nil,.F.)

	cIndexKey	:= "E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+DTOS(E1_EMISSAO)+E1_PORTADO+E1_CLIENTE"

	cFilter		+= "E1_FILIAL=='"+xFilial("SE1")+"'.And.E1_SALDO>0.And."
	cFilter		+= "E1_PREFIXO>='" + MV_PAR01 + "'.And.E1_PREFIXO<='" + MV_PAR02 + "'.And."
	cFilter		+= "E1_NUM>='" + MV_PAR03 + "'.And.E1_NUM<='" + MV_PAR04 + "'.And."
	cFilter		+= "E1_PARCELA>='" + MV_PAR05 + "'.And.E1_PARCELA<='" + MV_PAR06 + "'.And."
	cFilter		+= "E1_PORTADO>='" + MV_PAR07 + "'.And.E1_PORTADO<='" + MV_PAR08 + "'.And."
	cFilter		+= "E1_CLIENTE>='" + MV_PAR09 + "'.And.E1_CLIENTE<='" + MV_PAR10 + "'.And."
	cFilter		+= "E1_LOJA>='" + MV_PAR11 + "'.And.E1_LOJA<='"+MV_PAR12+"'.And."
	cFilter		+= "DTOS(E1_EMISSAO)>='"+DTOS(mv_par13)+"'.and.DTOS(E1_EMISSAO)<='"+DTOS(mv_par14)+"'.And."
	cFilter		+= 'DTOS(E1_VENCREA)>="'+DTOS(mv_par15)+'".and.DTOS(E1_VENCREA)<="'+DTOS(mv_par16)+'".And.'
	cFilter		+= "E1_NUMBOR>='" + MV_PAR17 + "'.And.E1_NUMBOR<='" + MV_PAR18 + "'.And."
	cFilter		+= "!(E1_TIPO$MVABATIM) .And. "
	cFilter		+= "( E1_VENCREA >= E1_EMISSAO ) "

	IndRegua("SE1", cIndexName, cIndexKey,, cFilter, "Aguarde selecionando registros....")
	DbSelectArea("SE1")
	dbGoTop()

	nVlrSel := 0
	nQtdSel := 0
	lPrim 	:= .T.

	//Envio de boleto em tela
	//Senao sera envio de boleto em job
	If !lJob

		// Se rotina estiver processando em tela, defino variaveis de geracao de boleto, Danfe e XML
		// de acordo com respostas do usuario
		lBoletoPDF := MV_PAR22

		@ 001,001 TO 400,700 DIALOG oDlg TITLE "Seleção de Titulos"
		oDlg:lMaximized := .T.

		@ 001,001 TO 170,350 BROWSE "SE1" MARK "E1_OK" OBJECT oBrw
		//Informacoes do Browse
		oBrw := MsSelect():New("SE1","E1_OK",,,,cMarca,{02,1,163,346})
		//Configuro lista  com exibicao total da tela
		oBrw:Align := CONTROL_ALIGN_ALLCLIENT

		//Informacoes do rodape da tela
		oTPnlRodap := TPanel():New(0,0,"",oDlg,Nil,.T.,.F.,Nil,Nil,0, aDimTela[6] * 0.065,.T.,.F.)

		//Configuro rodape com exibicao total da tela, respeitando o tamanho do rodape
		oTPnlRodap:Align := CONTROL_ALIGN_BOTTOM

		@ 010,010 SAY oSay1 PROMPT "Qtd Selec.: "+AllTrim(Transform(nQtdSel,"@R 999999999")) SIZE 070, 010 OF oTPnlRodap COLORS 0, 16777215 PIXEL
		@ 010,050 SAY oSay2 PROMPT "Vlr Selec.: "+AllTrim(Transform(nVlrSel,"@R 99,999,999.99")) SIZE 070, 010 OF oTPnlRodap COLORS 0, 16777215 PIXEL
		@ 010,310 BMPBUTTON TYPE 01 ACTION (lExec := .T.,Close(oDlg))
		@ 010,280 BMPBUTTON TYPE 02 ACTION (lExec := .F.,Close(oDlg))

		If lPrim
			SE1->(dbGoTop())
			While SE1->(!Eof())
				If Marked("E1_OK")
					nQtdSel++
					nVlrSel+=SE1->E1_VLCRUZ
				EndIf
				SE1->(dbSkip())
			Enddo
			SE1->(dbGoTop())
			oBrw:OBROWSE:BLDBLCLICK := {|| IIF( !Marked("E1_OK"),;
											Eval({|| nQtdSel++, nVlrSel+=SE1->E1_VLCRUZ}),;
											Eval({|| nQtdSel--, nVlrSel-=SE1->E1_VLCRUZ}) ),;
			oSay1:CCAPTION := "Qtd Selec.: "+AllTrim(Transform(nQtdSel,"@R 999999999")),;
			oSay2:CCAPTION := "Vlr Selec.: "+AllTrim(Transform(nVlrSel,"@R 99,999,999.99")),;
			RecLock("SE1",.F.),SE1->E1_OK:=IIF(Marked("E1_OK"),oBrw:CCODMARCA,""),MsUnLock(),oBrw:REFRESHLINE() }

			lPrim := .F.
		EndIf

		ACTIVATE DIALOG oDlg CENTERED

		dbGoTop()
		//Variaveis criadas para consolidacao dos fontes de boletos
		aRet := {}
		aPergs  := {}
		
		/*
		3 - Radio
		[2] : Descrição
		[3] : Numérico contendo a opção inicial do Radio
		[4] : Array contendo as opções do Radio
		[5] : Tamanho do Radio
		[6] : Validação
		[7] : Flag .T./.F. Parâmetro Obrigatório ?
		[8] : String contendo a validação When
		*/
		aAdd(aPergs, {3, "Selecione o banco para impressão de boletos", 1, aBancos, 100,, .T.})
		While Empty(aRet)
			ParamBox(aPergs ,"Parametros ",aRet)
		Enddo

		cBanco := Left(aBancos[aRet[1]],3)
		// Se funcao de re-impressao, esta posicionado no SE1
		// __cBanco := cBanco

		//Posiciona o SEA (Titulos enviados ao banco)
		// DbSelectArea("SEA")
		// SEA-(DbSetOrder(1))	// EA_FILIAL+EA_NUMBOR+EA_PREFIXO+EA_NUM+EA_PARCELA+EA_TIPO+EA_FORNECE+EA_LOJA
		// If SEA->( DbSeek(xFilial("SEA") + SE1->(E1_NUMBOR+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_FORNECE+E1_LOJA) ))

			//Posiciona o SA6 (Bancos)
			// DbSelectArea("SA6")
			// SA6-(DbSetOrder(1))
			// If SA6->( DbSeek(xFilial("SA6") + SEA->(EA_PORTADO+EA_AGEDEP+EA_NUMCON) ))

				// cSubConta := SA6->(GetSubConta(A6_COD, A6_AGENCIA, A6_NUMCON))

				// Posiciona o SEE (Parametros de bancos)
				// DbSelectArea("SEE")
				// SEE->(DbSetOrder(1))	// EE_FILIAL+EE_CODIGO+EE_AGENCIA+EE_CONTA+EE_SUBCTA
				// If SEE->(DbSeek(xFilial("SEE")+SA6->(A6_COD+A6_AGENCIA+A6_NUMCON)+cSubConta))

					If lExec
						
						cMsg := "Deseja Imprimir ou Enviar via e-mail?"
						nOpc 	:= Aviso("",cMsg,{'Imprimir','E-mail'},1,"Impressão Boletos - " + FunName())
						// nOpc := 2
						
						// If  nOpc == 1 //Imprimir
						// 	lPDF := .F.
						// 	Processa({|lEnd|MontaRel(lJob)})
						// Else

							// cMsg	:= "Deseja Enviar Boleto ou Enviar Boleto + NF ?"
							// nOpc 	:= Aviso("",cMsg,{'&Boleto','Boleto+&Nota'},1,"Impressão Boletos - " + FunName())
							// nOpc := 2

							// If  nOpc == 1 //Boleto
							// 	lPDF := .T.
							// 	lEnvioBol := .T.
							// 	Processa({|lEnd|MontaRel(lJob)})
							// Else
							// 	lPDF := .T.
							// 	lEnvioBol := .T.
							// 	lEnvBolNF := .T.
								Processa({|lEnd|MontaRel(lJob)})
							// EndIf
						// Endif
					EndIf
		// 		Else
		// 			GeraMsgErro("Subconta da agência e conta não encontrado no cadastro de parâmetros de bancos: " + xFilial("SEE") + SA6->(A6_COD+A6_AGENCIA+A6_NUMCON),;
		// 						lJob,;
		// 						{"&Cancelar"})
		// 		EndIf  
		// 	Else
		// 		GeraMsgErro("Agência e conta não encontrados no cadastro de banco: " + xFilial("SA6") + SEA->(EA_PORTADO+EA_AGEDEP+EA_NUMCON),;
		// 					lJob,;
		// 					{"&Cancelar"})
		// 	EndIf  
		// Else
		// 	GeraMsgErro("Dados de titulos enviados ao banco não encontrados: " + xFilial("SEA") + SE1->(E1_NUMBOR+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_FORNECE+E1_LOJA),;
		// 				lJob,;
		// 				{"&Cancelar"})
		// EndIf  
	Else

		// lPDF := !IsInCallStack("U_RFATA00")
		// lEnvioBol := .T.
		// lEnvBolNF := .T.
		// MsgRun("Aguarde...Verificando títulos para impressão de boletos...",__cNomBcoL+" - Emissão de Boletos",{|| MontaRel(lJob, @cFilePrint)})
		MontaRel(lJob, @cFilePrint)
	EndIf

	RetIndex("SE1")

	Ferase(cIndexName+OrdBagExt())
EndIf

Return cFilePrint

/*/{Protheus.doc} MontaRel
	(Impressao do boleto com codigo de barras)
	@type Static Function
	@author Renato Calabro'
	@since 20/03/2019
	@version 1.0
	@param lJob, logic, (Variavel de controle para identificar se processo esta em job ou nao)
	@return cFilePrint, character, (Caminho do arquivo PDF gerado, caso gere com sucesso)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function MontaRel(lJob as logical, cFilePrint as character)

// Local cFilePrint	:= "" as character
Local cDirPDF		:= "\boleto\" as character
Local cSfxNomArq	:= GetMv("ES_BOLSUFX",, "boleto_") as character
Local cSubConta		:= '' as character

Local nVlrAbat		:= 0 as numeric

Local aDadosEmp		:= {} as array
Local aDadosTit		:= {} as array
Local aDadosBanco	:= {} as array
Local aDatSacado	:= {} as array
Local aBolText		:= { MV_PAR19, MV_PAR20, MV_PAR21 } as array
Local aAreas		:= {SM0->(GetArea()), GetArea() } as array

Local oPrint		:= Nil as object

Private cLocal		:= "" as character

Private cNroDoc		:=  " " as character
Private nVetor		:= 0 as numeric
Private nContB		:= 0 as numeric
Private nTotItau	:= 0 as numeric
Private nTotSemNN	:= 0 as numeric
Private nTotImpEnv	:= 0 as numeric

Private dVencRea	:= CTOD("") as date

Private aTitulo		:= {} as array
Private aCB_RN_NN	:= {} as array

cFilePrint := If(Empty(cFilePrint), "", cFilePrint)

lJob := If(Empty(lJob), .F., lJob)

// Posiciona o SIGAMAT na filial 01 para que conste os dados da MATRIZ no boleto
dbSelectArea("SM0")
dbGoTop()
SM0->(MsSeek(cEmpAnt+cFilAnt))
aDadosEmp    := {	AllTrim(SM0->M0_NOMECOM),													; //[1]Nome da Empresa
					AllTrim(SM0->M0_ENDCOB),													; //[2]Endereço
					AllTrim(SM0->M0_BAIRCOB),													; //[3]Complemento
					AllTrim(SM0->M0_CIDCOB)+", "+SM0->M0_ESTCOB + " - CEP: "+					; //[4]Cidade + Estado
					Subs(SM0->M0_CEPCOB,1,5)+"-"+Subs(SM0->M0_CEPCOB,6,3),						; //[4]CEP
					"TEL: "+SM0->M0_TEL,														; //[5]Telefones
					"CNPJ "+Subs(SM0->M0_CGC,1,2)+"."+Subs(SM0->M0_CGC,3,3)+"."+				; //[6]
					Subs(SM0->M0_CGC,6,3)+"/"+Subs(SM0->M0_CGC,9,4)+"-"+						; //[6]
					Subs(SM0->M0_CGC,13,2),														; //[6]CGC
					"I.E.: "+Subs(SM0->M0_INSC,1,3)+"."+Subs(SM0->M0_INSC,4,3)+"."+				; //[7]
					Subs(SM0->M0_INSC,7,3)+"."+Subs(SM0->M0_INSC,10,3)							} //[7]I.E

aEval(aAreas, {|x| RestArea(x) })

// Monta nome do PDF com estrutura: Sufixo do MV + num. titulo + prefixo do titulo
cFilePrint		:= cSfxNomArq + AllTrim(SE1->E1_NUM) + AllTrim(SE1->E1_PREFIXO)

oPrint:= FwMSPrinter():New(cFilePrint, 6, .T., cDirPDF, .T.,,,,,,, .F.)
oPrint:SetPortrait()
oPrint:SetResolution(78)

nResult := 0
If !lIsDir(cDirPDF)
	nResult := MakeDir(cDirPDF)
Endif

If Empty(nResult)

	oPrint:cPathPDF := cDirPDF

	DbSelectArea("SE1")
	dbGotop()
	ProcRegua(RecCount())

	While SE1->(!EOF())

		If !lJob
			IncProc()
		EndIf

		// Posiciona o SEA (Titulos enviados ao banco)
		DbSelectArea("SEA")
		SEA->(DbSetOrder(1))	// EA_FILIAL+EA_NUMBOR+EA_PREFIXO+EA_NUM+EA_PARCELA+EA_TIPO+EA_FORNECE+EA_LOJA
		If SEA->( DbSeek(xFilial("SEA") + SE1->(E1_NUMBOR+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA) ))

			// Posiciona o SA6 (Bancos)
			DbSelectArea("SA6")
			SA6->(DbSetOrder(1))
			If SA6->( DbSeek(xFilial("SA6") + SEA->(EA_PORTADO+EA_AGEDEP+EA_NUMCON) ))

				cSubConta := SA6->(GetSubConta(A6_COD, A6_AGENCIA, A6_NUMCON))

				// Posiciona o SEE (Parametros de bancos)
				DbSelectArea("SEE")
				SEE->(DbSetOrder(1))	// EE_FILIAL+EE_CODIGO+EE_AGENCIA+EE_CONTA+EE_SUBCTA
				If SEE->(DbSeek(xFilial("SEE")+SA6->(A6_COD+A6_AGENCIA+A6_NUMCON)+cSubConta))

					// Rotina MDFIN13 utilizada para envio de boleto automatico
					// If Type("__cBanco") <> "C"
					// 	cBanco := SE1->E1_PORTADO
					// EndIf
					
					If cBanco == "001"
						// __cBanco    := "001"
						cChaveBanco := "0013333 6278"
					ElseIf cBanco == "341"
						// __cBanco    := "341"
						// aAdd(aBancos,{5,	'3410174 32626-4   '	,.F., 200,'.T.',.T.})
						// aAdd(aBancos,{5,	'3410174 026732    '	,.F., 200,'.T.',.T.})
						// aAdd(aBancos,{5,	'3410174 066894    '	,.F., 200,'.T.',.T.})
						// aAdd(aBancos,{5,	'3410174 05777     '	,.F., 200,'.T.',.T.})
					ElseIf cBanco == "237"
					
						// __cBanco    := "237"
						cChaveBanco := "23733677707007"
						
					ElseIf cBanco == "422"
						
						// __cBanco    := "422"
						cChaveBanco := "42202800003525339"
					
					ElseIf cBanco == "637"
						
						// __cBanco    := "637"
						cChaveBanco := "637"+"3689 "+"4845013   "
						
					ElseIf cBanco == "033"
						
						// __cBanco    := "033"
						cChaveBanco := "0333689 0130065423"
					EndIf

					IF !Vazio(SE1->E1_PORTADO)
						If ALLTRIM(SE1->E1_PORTADO) # SA6->A6_COD
							SE1->(DbSkip())
							Loop
						EndIf
					EndIf
					
					// If Type("__cBanco")  == "C" .AND. __cBanco == "341"
					// 	cChaveBanco := "341"+SubStr(cChaveBanco,4,5)+SubStr(cChaveBanco,9,10)
					// EndIf
					
					//Posiciona o SA6 (Bancos)
					DbSelectArea("SA6")
					DbSetOrder(1)
					If !DbSeek(xFilial("SA6")+cChaveBanco)
						msgInfo("Agência e conta não encontrados no cadastro de banco")
						SE1->(DbSkip())
						Loop
					EndIf
					
					//Posiciona o SA1 (Cliente)
					DbSelectArea("SA1")
					DbSetOrder(1)
					DbSeek(xFilial("SA1")+SE1->E1_CLIENTE+SE1->E1_LOJA,.T.)
					
					DbSelectArea("SE1")

					// Informacoes dos bancos
					aDadosBanco  := {	AllTrim(SA6->A6_COD),;		// [1]Numero do Banco
										AllTrim(SA6->A6_NOME),;		// [2]Nome do Banco
										AllTrim(SA6->A6_AGENCIA),;	// [3]Agência
										AllTrim(SA6->A6_NUMCON),;	// [4]Conta Corrente
										AllTrim(SA6->A6_DVCTA),;	// [5]Dígito da conta corrente
										Alltrim(SEE->EE_CODCART) }	// [6]Codigo da Carteira


					// Informacoes do sacador
					If Empty(SA1->A1_ENDCOB)
						aDatSacado := {	AllTrim(SA1->A1_NOME)								,;		// [1]Razão Social
										AllTrim(SA1->A1_COD )+"-"+SA1->A1_LOJA				,;		// [2]Código
										AllTrim(SA1->A1_END )+"-"+AllTrim(SA1->A1_BAIRRO)	,;		// [3]Endereço
										AllTrim(SA1->A1_MUN )								,;		// [4]Cidade
										SA1->A1_EST											,;     	// [5]Estado
										SA1->A1_CEP											,;		// [6]CEP
										SA1->A1_CGC											,;		// [7]CGC
										SA1->A1_PESSOA										}		// [8]PESSOA
					Else
						aDatSacado := {	AllTrim(SA1->A1_NOME)								,;		// [1]Razão Social
										AllTrim(SA1->A1_COD )+"-"+SA1->A1_LOJA				,;		// [2]Código
										AllTrim(SA1->A1_ENDCOB)+"-"+AllTrim(SA1->A1_BAIRROC),;		// [3]Endereço
										AllTrim(SA1->A1_MUNC)								,;		// [4]Cidade
										SA1->A1_ESTC										,;		// [5]Estado
										SA1->A1_CEPC										,;		// [6]CEP
										SA1->A1_CGC											,;		// [7]CGC
										SA1->A1_PESSOA										}		// [8]PESSOA
					Endif
					
					// Soma abatimentos do título
					nVlrAbat:=  0
					SumAbatRec(SE1->E1_PREFIXO,SE1->E1_NUM,SE1->E1_PARCELA,SE1->E1_MOEDA,"V",,@nVlrAbat)
					nVlrAbat   +=  SE1->E1_DECRESC
					
					IF __cBanco=="237"
						// Nosso Numero + Digito Verificador
						cNroDoc := CalcNoNu(SEE->EE_CODCART)
					Else
						// Aqui defino parte do nosso numero. Sao 8 digitos para identificar o titulo.
						// Abaixo apenas uma sugestao
						cNroDoc	:= Strzero(Val(Alltrim(SE1->E1_NUM)),6)+StrZERO(Val(Alltrim(SE1->E1_PARCELA)),2)
						cNroDoc	:= STRZERO(Val(cNroDoc),11)
					EndIf

					nVlrBol := E1_SALDO - nVlrAbat
					nVlrBol += SE1->E1_ACRESC

					dVencRea := SE1->E1_VENCREA

					If SA6->A6_COD == "237"
						// Monta codigo de barras e calcula o nosso numero com digito verificador
						aCB_RN_NN := Ret_cB(Subs(aDadosBanco[1],1,3), aDadosBanco[3], aDadosBanco[4], cNroDoc, nVlrBol ,dVencRea/*U_GetNewVFI2('*1',E1_VENCREA)*/)
					Else
						// Monta codigo de barras
						aCB_RN_NN := Ret_cBarra(aDadosBanco[3], nVlrBol, SEE->EE_CODCART, "9")
					EndIf

					DbSelectArea("SE1")
					aDadosTit	:= {AllTrim(E1_NUM)+AllTrim(E1_PARCELA)	,;  // [1] Número do título
					E1_EMISSAO                              				,;	// [2] Data da emissão do título
					dDataBase                    							,;	// [3] Data da emissão do boleto
					dVencRea												,;	// [4] Data do vencimento
					nVlrBol               									,;  // [5] Valor do título
					aCB_RN_NN[3]                            				,;	// [6] Nosso número (Ver fórmula para calculo)
					E1_PREFIXO                              				,;	// [7] Prefixo da NF
					E1_TIPO	                           						,;	// [8] Tipo do Titulo
					E1_PARCELA}													//[9] Parcela
					
					// Rotina utilizada para envio de boleto automatico
					If lJob

						nTotImpEnv++
						Impress(oPrint,aDadosEmp,aDadosTit,aDadosBanco,aDatSacado,aBolText,aCB_RN_NN, cFilePrint)
					Else

						DbSelectArea("SE1")
						If Marked("E1_OK") .AND. nVlrBol > 0

							nTotImpEnv++
							Impress(oPrint,aDadosEmp,aDadosTit,aDadosBanco,aDatSacado,aBolText,aCB_RN_NN, cFilePrint)
						EndIf
					EndIf

					GrvHistSE1(aCB_RN_NN, cNroDoc)
				Else
					GeraMsgErro("Subconta da agência e conta não encontrado no cadastro de parâmetros de bancos: " + xFilial("SEE") + SA6->(A6_COD+A6_AGENCIA+A6_NUMCON),;
								lJob,;
								{"&Cancelar"})
				EndIf  
			Else
				GeraMsgErro("Agência e conta não encontrados no cadastro de banco: " + xFilial("SA6") + SEA->(EA_PORTADO+EA_AGEDEP+EA_NUMCON),;
							lJob,;
							{"&Cancelar"})
			EndIf  
		Else
			GeraMsgErro("Dados de titulos enviados ao banco não encontrados: " + xFilial("SEA") + SE1->(E1_NUMBOR+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO+E1_CLIENTE+E1_LOJA),;
						lJob,;
						{"&Cancelar"})
		EndIf  
		SE1->(DbSkip())
	EndDo
Else
	GeraMsgErro("Não foi possível criar o diretório " + cDirPDF + " para a geração do arquivo do boleto em PDF.", lJob, {"&Sair"})
EndIf

If !lJob
	
	If nTotItau > 0
		msgInfo("Total de títulos novos selecionados para recebimento no Itaú: " + AllTrim(Str(nTotItau)))
	EndIf
	
	If nTotSemNN > 0
		msgInfo("Total de títulos sem o Nosso Número informado: " + AllTrim(Str(nTotSemNN)))
	EndIf
	
	If nTotImpEnv > 0
		msgInfo("Total de títulos impressos/enviados: " + AllTrim(Str(nTotImpEnv)))
	EndIf
	
EndIf

// Verifica se é Envio de Email para geração de Arquivo PDF
If lBoletoPDF
	
	If !Empty(cFilePrint)
		//Se existe aquivo PDF antigo, apaga arquivo
		If File(FileNoExt(oPrint:cFilePrint)+".PDF")
		 	FErase(FileNoExt(oPrint:cFilePrint) + ".PDF")
		EndIf

		oPrint:Preview()
		//Armazeno caminho que encontra-se o boleto
		cFilePrint := FileNoExt(oPrint:cFilePrint) + ".PDF"

		//Se gerou arquivo .REL, converto para PDF
		If File(FileNoExt(oPrint:cFilePrint)+".REL")
			FClose(oPrint:nHandle)
			File2Printer(oPrint:cFilePrint, "PDF" )
			sleep(1000)
			FErase(oPrint:cFilePrint)
		Endif

	Endif

	// Chama rotina de envio de e-mail [ RFA01EnvBol() ] *
	If !IsInCallStack("U_RFATJ01")
		RFA01EnvBol(cDirPDF,aTitulo,lJob)//TODO: Necessario colocar o envio do Boleto em outro fonte
	EndIf
	SE1->(DBCLEARFILTER()) //Limpa o Filtro da tabela SE1
	
	FreeObj(oPrint)
	oPrint := Nil
Else
	If !lJob
		oPrint:EndPage()     // Finaliza a página
		oPrint:Preview()     // Visualiza antes de imprimir
	Else
		cFilePrint := FileNoExt(oPrint:cFilePrint) + ".TXT"
	EndIf
EndIf

Return cFilePrint

/*/{Protheus.doc} Impress
	(Impressao do boleto com codigo de barras)
	@type Static Function
	@author Calabro'
	@since 13/10/2003
	@version version
	@param oPrint, object, (Objeto com as propriedades de impressao do FwMsPrinter instanciado)
	@param aDadosEmp, array, (Array com dados da empresa logada)
	@param aDadosTit, array, (Array com dados do titulo posicionado)
	@param aDadosBanco, array, (Array com dados do banco)
	@param aDatSacado, array, (Array com dados do sacado)
	@param aBolText, array, (Array com as 3 observacoes adicionadas nos parametros de perguntas)
	@param aCB_RN_NN, array, (Array com dados dos codigos de barras)
	@param cFilePrint, character, (Caminho do arquivo PDF gerado, caso gere com sucesso)
	@return cFilePrint, character, (Caminho do arquivo PDF gerado, caso gere com sucesso)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function Impress(oPrint as object,;
						aDadosEmp as array,;
						aDadosTit as array,;
						aDadosBanco as array,;
						aDatSacado as array,;
						aBolText as array,;
						aCB_RN_NN as array,;
						cFilePrint as character)

Local oFont8		:= Nil as object
Local oFont9		:= Nil as object
Local oFont7		:= Nil as object
Local oFont9n		:= Nil as object
Local oFont11c		:= Nil as object
Local oFont11		:= Nil as object
Local oFont10		:= Nil as object
Local oFont13		:= Nil as object
Local oFont14		:= Nil as object
Local oFont16n		:= Nil as object
Local oFont15		:= Nil as object
Local oFont14n		:= Nil as object
Local oFont18		:= Nil as object
Local oFont24		:= Nil as object
Local oBrush		:= Nil as object

Local _cNum			:= SE1->E1_NUM as character
Local _cPrefix		:= SE1->E1_PREFIXO as character
Local _cParcel		:= SE1->E1_PARCELA as character
Local cCodCli		:= SE1->E1_CLIENTE as character
Local cLojaCli		:= SE1->E1_LOJA as character
Local cNomCli		:= ALLTRIM(SE1->E1_NOMCLI) as character
Local _cPortado		:= "" as character
Local cXFil			:= SE1->E1_FILIAL as character
Local cXTipo		:= SE1->E1_TIPO as character
Local cLogo			:= "\system\bradesco.png" as character

Local nI			:= 0 as numeric
Local nPosVet		:= 0  as numeric

oFont7 := TFont():New("Arial",9,7,.T.,.F.,5,.T.,5,.T.,.F.)
oFont8 := TFont():New("Arial",9,8,.T.,.F.,5,.T.,5,.T.,.F.)
oFont9 := TFont():New("Arial",9,9,.T.,.T.,5,.T.,5,.T.,.F.)
oFont9n := TFont():New("Arial",9,9,.T.,.F.,5,.T.,5,.T.,.F.)
oFont11 := TFont():New("Arial",9,11,.T.,.T.,5,.T.,5,.T.,.F.)
oFont11c := TFont():New("Courier New",9,11,.T.,.T.,5,.T.,5,.T.,.F.)
oFont10 := TFont():New("Arial",9,10,.T.,.T.,5,.T.,5,.T.,.F.)
oFont12 := TFont():New("Arial",9,12,.T.,.T.,5,.T.,5,.T.,.F.)
oFont13 := TFont():New("Arial",9,13,.T.,.T.,5,.T.,5,.T.,.F.)
oFont14 := TFont():New("Arial",9,14,.T.,.T.,5,.T.,5,.T.,.F.)
oFont18 := TFont():New("Arial",9,18,.T.,.T.,5,.T.,5,.T.,.F.)
oFont20 := TFont():New("Arial",9,20,.T.,.T.,5,.T.,5,.T.,.F.)
oFont21 := TFont():New("Arial",9,21,.T.,.T.,5,.T.,5,.T.,.F.)
oFont16n := TFont():New("Arial",9,16,.T.,.F.,5,.T.,5,.T.,.F.)
oFont15 := TFont():New("Arial",9,15,.T.,.T.,5,.T.,5,.T.,.F.)
oFont15n := TFont():New("Arial",9,15,.T.,.F.,5,.T.,5,.T.,.F.)
oFont14n := TFont():New("Arial",9,14,.T.,.F.,5,.T.,5,.T.,.F.)
oFont24 := TFont():New("Arial",9,24,.T.,.T.,5,.T.,5,.T.,.F.)
oBrush := TBrush():New("",9)

oPrint:StartPage()   // Inicia uma nova página

// PRIMEIRA PARTE

nRow1 := -100

oPrint:Line (nRow1+0150,500,nRow1+0070, 500)
oPrint:Line (nRow1+0150,710,nRow1+0070, 710)

oPrint:SayBitmap(nRow1+0054,100,cLogo,380,090) 													// o arquivo com o logo deve estar abaixo do rootpath (Data\system)
oPrint:Say (nRow1+0115,513,aDadosBanco[1]+GetDVBanco(aDadosBanco[1])[2],oFont21 )	// [1]Numero do Banco

oPrint:Say (nRow1+0104,1900,"Comprovante de Entrega",oFont10)
oPrint:Line (nRow1+0150,100,nRow1+0150,2300)

oPrint:Say (nRow1+0170,100 ,OemToansi("Beneficiário:"),oFont8)
// If __cBanco=="422"
// 	oPrint:Say (nRow1+0220,100 ,"BANCO SAFRA S/A",oFont10)				//Nome + CNPJ
// ElseIf __cBanco=="637"
// 	oPrint:Say (nRow1+0220,100 ,OemToAnsi("BANCO SOFISA SP CNPJ 60.889.128/0001-80"),oFont10)				//Nome + CNPJ
// Else
	oPrint:Say (nRow1+0190,100 ,aDadosEmp[1]+" - "+aDadosEmp[6],oFont9)				//Nome + CNPJ
	oPrint:Say (nRow1+0215,100 ,aDadosEmp[2],oFont9)									//End
	oPrint:Say (nRow1+0240,100 ,aDadosEmp[3] + " - " + aDadosEmp[4],oFont9)			//Bairro + CEP + Compl
// EndIf

oPrint:Say (nRow1+0170,1060,OemToansi("Agência/Código Beneficiário:"),oFont8)
oPrint:Say (nRow1+0220,1060,StrTran(aDadosBanco[3]+"/"+aDadosBanco[4]+IIF(Empty(aDadosBanco[5])," ","-"+aDadosBanco[5]),'--','-'),oFont10)

oPrint:Say (nRow1+0170,1510,"Nro.Documento:",oFont8)
oPrint:Say (nRow1+0220,1510,"  "+aDadosTit[7]+aDadosTit[1],oFont10) //Prefixo +Numero+Parcela

oPrint:Say (nRow1+0270,100 ,"Pagador:",oFont8)
oPrint:Say (nRow1+0320,100 ,SUBSTR(aDatSacado[1],1,40),oFont10)				//Nome

oPrint:Say (nRow1+0270,1060,"Vencimento",oFont8)
oPrint:Say (nRow1+0320,1060,StrZero(Day(aDadosTit[4]),2) +"/"+ StrZero(Month(aDadosTit[4]),2) +"/"+ Right(Str(Year(aDadosTit[4])),4),oFont10)

oPrint:Say (nRow1+0270,1510,"Valor do Documento",oFont8)
oPrint:Say (nRow1+0320,1550,AllTrim(Transform(aDadosTit[5],"@E 999,999,999.99")),oFont10)

oPrint:Say (nRow1+0420,0100,"Recebi(emos) o bloqueto/título",oFont10)
oPrint:Say (nRow1+0470,0100,"com as características acima.",oFont10)
oPrint:Say (nRow1+0370,1060,"Data",oFont8)
oPrint:Say (nRow1+0370,1410,"Assinatura",oFont8)
oPrint:Say (nRow1+0470,1060,"Data",oFont8)
oPrint:Say (nRow1+0470,1410,"Entregador",oFont8)

oPrint:Line (nRow1+0250, 100,nRow1+0250,1900 )
oPrint:Line (nRow1+0350, 100,nRow1+0350,1900 )
oPrint:Line (nRow1+0550, 100,nRow1+0550,2300 )

oPrint:Line (nRow1+0550,1050,nRow1+0150,1050 )
oPrint:Line (nRow1+0550,1400,nRow1+0350,1400 )
oPrint:Line (nRow1+0350,1500,nRow1+0150,1500 )
oPrint:Line (nRow1+0550,1900,nRow1+0150,1900 )

oPrint:Say (nRow1+0185,1910,"(  )Mudou-se"									,oFont8)
oPrint:Say (nRow1+0225,1910,"(  )Ausente"									,oFont8)
oPrint:Say (nRow1+0265,1910,"(  )Não existe nº indicado"					,oFont8)
oPrint:Say (nRow1+0305,1910,"(  )Recusado"									,oFont8)
oPrint:Say (nRow1+0345,1910,"(  )Não procurado"								,oFont8)
oPrint:Say (nRow1+0385,1910,"(  )Endereço insuficiente"						,oFont8)
oPrint:Say (nRow1+0425,1910,"(  )Desconhecido"								,oFont8)
oPrint:Say (nRow1+0465,1910,"(  )Falecido"									,oFont8)
oPrint:Say (nRow1+0505,1910,"(  )Outros(anotar no verso)"					,oFont8)

// SEGUNDA PARTE
nRow2 := -80

// Pontilhado separador
For nI := 100 to 2300 step 50
	oPrint:Line(0500, nI,0500, nI+30)
Next nI

oPrint:Line (nRow2+0710,100,nRow2+0710,2300)
oPrint:Line (nRow2+0710,500,nRow2+0630, 500)
oPrint:Line (nRow2+0710,710,nRow2+0630, 710)

oPrint:SayBitmap(nRow2+0610,100,cLogo,380,090)							// o arquivo com o logo deve estar abaixo do rootpath (Data\system)
oPrint:Say (nRow2+0685,513,aDadosBanco[1]+GetDVBanco(aDadosBanco[1])[2],oFont21 )		// [1]Numero do Banco
oPrint:Say (nRow2+0694,1800,"Recibo do Pagador",oFont10)

oPrint:Line (nRow2+0810,100,nRow2+0810,2300 )
oPrint:Line (nRow2+0910,100,nRow2+0910,2300 )
oPrint:Line (nRow2+0980,100,nRow2+0980,2300 )
oPrint:Line (nRow2+1050,100,nRow2+1050,2300 )

oPrint:Line (nRow2+0910,500,nRow2+1050,500)
oPrint:Line (nRow2+0980,750,nRow2+1050,750)
oPrint:Line (nRow2+0910,1000,nRow2+1050,1000)
oPrint:Line (nRow2+0910,1300,nRow2+0980,1300)
oPrint:Line (nRow2+0910,1480,nRow2+1050,1480)

oPrint:Say (nRow2+0730,100 ,"Local de Pagamento:"										,oFont8)
oPrint:Say (nRow2+0745,400 ,"PAGÁVEL EM QUALQUER BANCO ATÉ A DATA DO VENCIMENTO"		,oFont10)
// If __cBanco != "422"
// 	oPrint:Say (nRow2+0785,400 ,"APÓS O VENCIMENTO, SOMENTE NO BANCO " + StrTran(Upper(aDadosBanco[2]), "BANCO ")		,oFont10)
// EndIf
oPrint:Say (nRow2+0730,1810,"Vencimento:"												,oFont8)
cString	:= StrZero(Day(aDadosTit[4]),2) +"/"+ StrZero(Month(aDadosTit[4]),2) +"/"+ Right(Str(Year(aDadosTit[4])),4)
nCol := 1810+(374-(len(cString)*22))
oPrint:Say (nRow2+0770,nCol,cString,oFont11c)

oPrint:Say (nRow2+0830,100 ,OemToansi("Beneficiário:")									,oFont8)
// If __cBanco=="422"
// 	oPrint:Say (nRow2+0870,100 ,"BANCO SAFRA S/A"										,oFont10)		//Nome + CNPJ
// ElseIf __cBanco=="637"
// 	oPrint:Say (nRow2+0870,100 ,OemToAnsi("BANCO SOFISA SP CNPJ 60.889.128/0001-80")	,oFont10)		//Nome + CNPJ
// Else
	oPrint:Say (nRow2+0850,100 ,AllTrim(aDadosEmp[1]+" - "+aDadosEmp[6] )				,oFont9) 		//Nome + CNPJ
	oPrint:Say (nRow2+0875,100 ,aDadosEmp[2]											,oFont9)		//End + Bairro
	oPrint:Say (nRow2+0900,100 ,aDadosEmp[3] + " - " + aDadosEmp[4]						,oFont9)		//CEP + Compl
// EndIf

oPrint:Say (nRow2+0830,1810,"Agência/Código "+OemToansi("Beneficiário:")				,oFont8)
cString := StrTran(Alltrim(aDadosBanco[3]+"/"+aDadosBanco[4]+IIF(Empty(aDadosBanco[5])," ","-"+aDadosBanco[5])),'--','-')
nCol := 1818+(374-(len(cString)*22))
oPrint:Say (nRow2+0870,nCol,cString,oFont11c)

oPrint:Say (nRow2+0930,100 ,"Data do Documento:"										,oFont8)
oPrint:Say (nRow2+0960,100, StrZero(Day(aDadosTit[2]),2) +"/"+ StrZero(Month(aDadosTit[2]),2) +"/"+ Right(Str(Year(aDadosTit[2])),4),oFont10)

oPrint:Say (nRow2+0930,505 ,"Nro.Documento:"											,oFont8)
oPrint:Say (nRow2+0960,605 ,aDadosTit[1]												,oFont10)		//Numero+Parcela

oPrint:Say (nRow2+0930,1005,"Espécie Doc.:"												,oFont8)
oPrint:Say (nRow2+0960,1050,"DM"														,oFont10)		//Tipo do Titulo

oPrint:Say (nRow2+0930,1305,"Aceite:"													,oFont8)
oPrint:Say (nRow2+0960,1400,"N"															,oFont10)

oPrint:Say (nRow2+0930,1485,"Data do Processamento:"									,oFont8)
oPrint:Say (nRow2+0960,1550,StrZero(Day(aDadosTit[3]),2) +"/"+ StrZero(Month(aDadosTit[3]),2) +"/"+ Right(Str(Year(aDadosTit[3])),4),oFont10) // Data impressao

oPrint:Say (nRow2+0930,1810,"Nosso Número:"												,oFont8)
If SA6->A6_COD == "341" .Or. SA6->A6_COD == "422"
	cString := aDadosBanco[6] + "/" + Alltrim(substr(aDadosTit[6],1,8)) + "-" + Alltrim(substr(aDadosTit[6],9,1))
ElseIf SA6->A6_COD == "001"
	cString := Alltrim("1225233"+aDadosTit[6])
ElseIf SA6->A6_COD == "237"
	cString := '09/'+Substr(cNroDoc,1,11)+'-'+Substr(cNroDoc,12,1)
ElseIf SA6->A6_COD $ "637/@/033"
	cString := aDadosTit[6]+'-'+Modulo11(aDadosTit[6])
EndIf

nCol := 1854+(374-(len(cString)*22))
oPrint:Say (nRow2+0960,nCol,cString,oFont11c)

oPrint:Say (nRow2+1000,100 ,"Uso do Banco:"												,oFont8)

oPrint:Say (nRow2+1000,505 ,"Carteira:"													,oFont8)
oPrint:Say (nRow2+1030,555 ,aDadosBanco[6]												,oFont10)

oPrint:Say (nRow2+1000,755 ,"Espécie:"													,oFont8)
oPrint:Say (nRow2+1030,805 ,"R$"														,oFont10)

oPrint:Say (nRow2+1000,1005,"Quantidade:"												,oFont8)
oPrint:Say (nRow2+1000,1485,"Valor:"													,oFont8)

oPrint:Say (nRow2+1000,1810,"(=) Valor do Documento:"									,oFont8)

cString := Alltrim(Transform(aDadosTit[5],"@E 99,999,999.99"))

nCol := 1796+(374-(len(cString)*22))
oPrint:Say (nRow2+1030,nCol,cString ,oFont11c)

// If __cBanco != "422"
	oPrint:Say (nRow2+1070,100 ,OemToAnsi("Instruções de responsabilidade do BENEFICIÁRIO. Qualquer dúvida sobre este boleto, contate o BENEFICIÁRIO."),oFont8)
// EndIf

oPrint:Say (nRow2+1120,120 ,"^ ^ VALORES EXPRESSOS EM REAIS ^^^^ ^",oFont10)
oPrint:Say (nRow2+1170,120 ,"JUROS POR DIA DE ATRASO..........." + Alltrim(Transform(Round(aDadosTit[5]/300,2),"@E 99,999,999.99")) ,oFont10)
oPrint:Say (nRow2+1220,120,"Boleto Ref. NF "+SE1->E1_PREFIXO + "-" + SE1->E1_NUM + " SUJEITO A PROTESTO APÓS VENCIMENTO",oFont10)

oPrint:Say (nRow2+1070,1810,"(-)Desconto/Abatimento"									,oFont8)
oPrint:Say (nRow2+1140,1810,"(-)Outras Deduções"										,oFont8)
oPrint:Say (nRow2+1210,1810,"(+)Mora/Multa"												,oFont8)
oPrint:Say (nRow2+1280,1810,"(+)Outros Acréscimos"										,oFont8)
oPrint:Say (nRow2+1350,1810,"(=)Valor Cobrado"											,oFont8)

oPrint:Say (nRow2+1420,100 ,"Pagador:"													,oFont8)
oPrint:Say (nRow2+1450,370 ,aDatSacado[1]+" ("+aDatSacado[2]+")"						,oFont10)
oPrint:Say (nRow2+1503,370 ,aDatSacado[3]												,oFont10)
oPrint:Say (nRow2+1566,370 ,aDatSacado[6]+"    "+aDatSacado[4]+" - "+aDatSacado[5]		,oFont10)		// CEP+Cidade+Estado

if aDatSacado[8] = "J"
	oPrint:Say (nRow2+1450,1750 ,"CNPJ: "+TRANSFORM(aDatSacado[7],"@R 99.999.999/9999-99"),oFont10) 	// CGC
Else
	oPrint:Say (nRow2+1450,1750 ,"CPF: "+TRANSFORM(aDatSacado[7],"@R 999.999.999-99")	,oFont10) 		// CPF
EndIf

oPrint:Say (nRow2+1625,100 ,"Pagador/Avalista"											,oFont8)

oPrint:Say (nRow2+1665+20,1500,"Autenticação Mecânica"									,oFont8)

oPrint:Line (nRow2+0710,1800,nRow2+1400,1800 )
oPrint:Line (nRow2+1120,1800,nRow2+1120,2300 )
oPrint:Line (nRow2+1190,1800,nRow2+1190,2300 )
oPrint:Line (nRow2+1260,1800,nRow2+1260,2300 )
oPrint:Line (nRow2+1330,1800,nRow2+1330,2300 )
oPrint:Line (nRow2+1400,100 ,nRow2+1400,2300 )
oPrint:Line (nRow2+1640+20,100 ,nRow2+1640+20,2300 )

// TERCEIRA PARTE
nRow3 := -180

For nI := 100 to 2300 step 50
	oPrint:Line(nRow3+1890, nI, nRow3+1890, nI+30)
Next nI

oPrint:Line (nRow3+2000,100,nRow3+2000,2300)
oPrint:Line (nRow3+2000,500,nRow3+1920, 500)
oPrint:Line (nRow3+2000,710,nRow3+1920, 710)

oPrint:SayBitmap(nRow3+1900,100,cLogo,380,090) 								// o arquivo com o logo deve estar abaixo do rootpath (Data\system)
oPrint:Say (nRow3+1970,513,aDadosBanco[1]+GetDVBanco(aDadosBanco[1])[2],oFont21 )				//Numero do Banco

//Linha Digitavel
If SA6->A6_COD == "237"
	cLinDig := MontaLinha(aDadosTit[4])
	oPrint:Say (nRow3+1934,740,cLinDig,oFont14n)							//	Linha Digitavel do Codigo de Barras
Else
	oPrint:Say (nRow3+1964,755,aCB_RN_NN[2],oFont15n)						//	Linha Digitavel do Codigo de Barras
EndIf

oPrint:Line (nRow3+2100,100,nRow3+2100,2300 )
oPrint:Line (nRow3+2200,100,nRow3+2200,2300 )
oPrint:Line (nRow3+2270,100,nRow3+2270,2300 )
oPrint:Line (nRow3+2340,100,nRow3+2340,2300 )

oPrint:Line (nRow3+2200,500 ,nRow3+2340,500 )
oPrint:Line (nRow3+2270,750 ,nRow3+2340,750 )
oPrint:Line (nRow3+2200,1000,nRow3+2340,1000)
oPrint:Line (nRow3+2200,1300,nRow3+2270,1300)
oPrint:Line (nRow3+2200,1480,nRow3+2340,1480)

oPrint:Say (nRow3+2020,100 ,"Local de Pagamento:"										,oFont8)
oPrint:Say (nRow3+2035,400 ,"PAGÁVEL EM QUALQUER BANCO ATÉ A DATA DO VENCIMENTO"		,oFont10)
oPrint:Say (nRow3+2075,400 ,"APÓS O VENCIMENTO, SOMENTE NO BANCO " + StrTran(Upper(aDadosBanco[2]), "BANCO ")		,oFont10)

oPrint:Say (nRow3+2020,1810,"Vencimento"												,oFont8)
cString := StrZero(Day(aDadosTit[4]),2) +"/"+ StrZero(Month(aDadosTit[4]),2) +"/"+ Right(Str(Year(aDadosTit[4])),4)
nCol	 	 := 1810+(374-(len(cString)*22))
oPrint:Say (nRow3+2060,nCol,cString,oFont11c)

oPrint:Say (nRow3+2120,100 ,OemToansi("Beneficiário:")									,oFont8)
// If __cBanco=="422"
// 	oPrint:Say (nRow3+2160,100 ,"BANCO SAFRA S/A"										,oFont10)		//Nome + CNPJ
// ElseIf __cBanco=="637"
// 	oPrint:Say (nRow3+2160,100 ,OemToAnsi("BANCO SOFISA SP CNPJ 60.889.128/0001-80")	,oFont10)		//Nome + CNPJ
// Else
	oPrint:Say (nRow3+2140,100 ,AllTrim(aDadosEmp[1]+" - "+aDadosEmp[6] )				,oFont9)		//Nome + CNPJ
	oPrint:Say (nRow3+2165,100 ,aDadosEmp[2]											,oFont9)		//End + Bairro
	oPrint:Say (nRow3+2190,100 ,aDadosEmp[3] + " - " + aDadosEmp[4]						,oFont9)		//CEP + Compl
// EndIf

oPrint:Say (nRow3+2120,1810,"Agência/Código "+OemToansi("Beneficiário:")				,oFont8)

cString := StrTran(Alltrim(aDadosBanco[3]+"/"+aDadosBanco[4]+IIF(Empty(aDadosBanco[5])," ","-"+aDadosBanco[5])),'--','-')
nCol 	:= 1818+(374-(len(cString)*22))
oPrint:Say (nRow3+2160,nCol,cString ,oFont11c)

oPrint:Say (nRow3+2220,100 ,"Data do Documento:"										,oFont8)
oPrint:Say (nRow3+2250,100, StrZero(Day(aDadosTit[2]),2) +"/"+ StrZero(Month(aDadosTit[2]),2) +"/"+ Right(Str(Year(aDadosTit[2])),4), oFont10)


oPrint:Say (nRow3+2220,505 ,"Nro.Documento:"											,oFont8)
oPrint:Say (nRow3+2250,605 ,aDadosTit[1]												,oFont10)		//Numero+Parcela

oPrint:Say (nRow3+2220,1005,"Espécie Doc.:"												,oFont8)
oPrint:Say (nRow3+2250,1050,"DM"														,oFont10)		//Tipo do Titulo

oPrint:Say (nRow3+2220,1305,"Aceite:"													,oFont8)
oPrint:Say (nRow3+2250,1400,"N"															,oFont10)

oPrint:Say (nRow3+2220,1485,"Data do Processamento:"									,oFont8)
oPrint:Say (nRow3+2250,1550,StrZero(Day(aDadosTit[3]),2) +"/"+ StrZero(Month(aDadosTit[3]),2) +"/"+ Right(Str(Year(aDadosTit[3])),4)                               ,oFont10) // Data impressao


oPrint:Say (nRow3+2220,1810,"Nosso Número:"												,oFont8)
If SA6->A6_COD == "341" .Or. SA6->A6_COD == "422"
	cString := aDadosBanco[6]+"/"+Alltrim(substr(aDadosTit[6],1,8))+"-"+Alltrim(substr(aDadosTit[6],9,1))
ElseIf SA6->A6_COD == "001"
	cString := Alltrim("1225233"+aDadosTit[6])
ElseIf SA6->A6_COD == "237"
	cString := SEE->EE_CODCART + '/' + Substr(cNroDoc,1,11)+'-'+Substr(cNroDoc,12,1)
ElseIf SA6->A6_COD == "637/@/033"
	cString := aDadosTit[6]+'-'+Modulo11(aDadosTit[6])
EndIf
nCol 	 := 1854+(374-(len(cString)*22))
oPrint:Say (nRow3+2250,nCol,cString,oFont11c)

oPrint:Say (nRow3+2290,100 ,"Uso do Banco:"												,oFont8)

oPrint:Say (nRow3+2290,505 ,"Carteira:"													,oFont8)
oPrint:Say (nRow3+2320,555 ,aDadosBanco[6]												,oFont10)

oPrint:Say (nRow3+2290,755 ,"Espécie:"													,oFont8)
oPrint:Say (nRow3+2320,805 ,"R$"														,oFont10)

oPrint:Say (nRow3+2290,1005,"Quantidade:"												,oFont8)
oPrint:Say (nRow3+2290,1485,"Valor:"													,oFont8)

oPrint:Say (nRow3+2290,1810,"(=) Valor do Documento:"									,oFont8)

cString := Alltrim(Transform(aDadosTit[5],"@E 99,999,999.99"))
nCol := 1796+(374-(len(cString)*22))
oPrint:Say (nRow3+2320,nCol,cString,oFont11c)

// IF __cBanco != "422"
	oPrint:Say (nRow3+2360,100 ,OemToAnsi("Instruções de responsabilidade do BENEFICIÁRIO. Qualquer dúvida sobre este boleto, contate o BENEFICIÁRIO."),oFont8)
// EndIf

oPrint:Say (nRow3+2410,120 ,"^ ^ VALORES EXPRESSOS EM REAIS ^^^^ ^"						,oFont10)
oPrint:Say (nRow3+2460,120 ,"JUROS POR DIA DE ATRASO..........." + Alltrim(Transform(Round(aDadosTit[5]/300,2),"@E 99,999,999.99"))	,oFont10)
oPrint:Say (nRow3+2510,120,"Boleto Ref. NF "+SE1->E1_PREFIXO + "-" + SE1->E1_NUM + " SUJEITO A PROTESTO APÓS VENCIMENTO"	,oFont10)

oPrint:Say (nRow3+2360,1810,"(-)Desconto/Abatimento"									,oFont8)
oPrint:Say (nRow3+2430,1810,"(-)Outras Deduções"										,oFont8)
oPrint:Say (nRow3+2500,1810,"(+)Mora/Multa"												,oFont8)
oPrint:Say (nRow3+2570,1810,"(+)Outros Acréscimos"										,oFont8)
oPrint:Say (nRow3+2640,1810,"(=)Valor Cobrado"											,oFont8)

oPrint:Say (nRow3+2710,100 ,"Pagador:"													,oFont8)
oPrint:Say (nRow3+2720,370 ,aDatSacado[1]+" ("+aDatSacado[2]+")"						,oFont10)

if aDatSacado[8] = "J"
	oPrint:Say (nRow3+2720,1750,"CNPJ: "+TRANSFORM(aDatSacado[7],"@R 99.999.999/9999-99"),oFont10)		// CGC
Else
	oPrint:Say (nRow3+2720,1750,"CPF: "+TRANSFORM(aDatSacado[7],"@R 999.999.999-99")	,oFont10)		// CPF
EndIf

oPrint:Say (nRow3+2773,370 ,aDatSacado[3], oFont10)
oPrint:Say (nRow3+2826,370 ,aDatSacado[6]+"    "+aDatSacado[4]+" - "+aDatSacado[5]		, oFont10)		// CEP+Cidade+Estado

oPrint:Say (nRow3+2885,100 ,"Pagador/Avalista"											, oFont8)

oPrint:Line (nRow3+2000,1800,nRow3+2690,1800 )
oPrint:Line (nRow3+2410,1800,nRow3+2410,2300 )
oPrint:Line (nRow3+2480,1800,nRow3+2480,2300 )
oPrint:Line (nRow3+2550,1800,nRow3+2550,2300 )
oPrint:Line (nRow3+2620,1800,nRow3+2620,2300 )
oPrint:Line (nRow3+2690,100 ,nRow3+2690,2300 )

oPrint:Line (nRow3+2930,100,nRow3+2930,2300  )

oPrint:Say (nRow3+2950,1500,"Autenticação Mecânica - Ficha de Compensação"				, oFont8)

oPrint:FWMSBAR("INT25",68,2,aCB_RN_NN[1],oPrint,.F., Nil,.T.,0.020,0.75,.F.,"Arial",'',.F.,0.5,0.5,.T. )

For nI := 100 to 2300 step 50
	oPrint:Line(nRow3+3065, nI, nRow3+3065, nI+30)
Next nI

// Finaliza a página
oPrint:EndPage()

_cPortado := SE1->E1_PORTADO

// Guarda todos os titulos Gerados no vetor [ aTitulo]
// Verifica se o Envio e somente de Boleto
// Caso contrario envia Boleto + Nota
If lBoletoPDF
	// Pesquisa no vetor1
	nPosVet:=aScan(aTitulo, {|x| x[1] == cFilePrint})
	
	If nPosVet == 0
		aAdd(aTitulo,{cFilePrint, _cNum, _cPrefix, _cParcel, cCodCli, cLojaCli, cNomCli, _cPortado, oPrint, cXFil, cXTipo })
	EndIf
	
EndIf

Return cFilePrint

/*/{Protheus.doc} CalcNoNu
	(Define nosso numero para calculo e impressao de boletos.  
	usado no boleto do bradesco)
	@type Static Function
	@author Calabro'
	@since 13/10/2003
	@version version
	@return cNroDoc, character, (Nosso numero calculado com digito verificador)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function CalcNoNu(cCodCartei as character)

Local nCont		:= 0 as numeric

If Empty( SE1->E1_NUMBCO )
	cNroDoc := SUBS(SE1->E1_CLIENTE,2,5) + STRZERO(SE1->(RECNO()),6)
Else
	cNroDoc := Substr(SE1->E1_NUMBCO,1,11)
EndIf

cNroDoc  := cCodCartei + cNroDoc		// Carteira + nosso numero

cCombina := "2765432765432"				// 13 posicoes
aResulta := {}

For nCont := 1 To 13
	
	nVal1 := Val( SubStr( cNroDoc,  nCont, 1 ) )
	nVal2 := Val( SubStr( cCombina, nCont, 1 ) )
	
	AAdd( aResulta, nVal1 * nVal2 )
Next

nTotProd  := 0
For nCont := 1 To Len(aResulta)
	nTotProd := nTotProd + aResulta[ nCont ]
Next

nResulta := Int(nTotProd / 11)
nResto   := nTotProd - ( nResulta * 11 )

If nResto >= 1
	
	_cDigito := Alltrim(Str( 11 - nResto))
	
	if _cDigito == "10"
		cDigVerif := "P"
	Else
		cDigVerif := Alltrim(Str( 11 - nResto))
	Endif
Else
	cDigVerif := "0"
Endif

cNroDoc  := Substr(cNroDoc,3,11) + cDigVerif

Return cNroDoc

/*/{Protheus.doc} Ret_CB
	(Montagem do código de barras)
	@type Static Function
	@author Calabro'
	@since 13/10/2003
	@version version
	@param cBanco, character, (Numero do banco)
	@param cAgencia, character, (Numero da agencia)
	@param cConta, character, (Numero da conta)
	@param cNroDoc, character, (Nosso numero)
	@param nValor, numeric, (Valor do titulo)
	@param dVencto, date, (Data de vencimento do titulo)
	@return aRet, array, (Array contendo os dados do codigo de barras:
							[1] - Codigo de barras
							[2]-Nosso numero convertido com zeros a esquerda)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function Ret_CB(	cBanco as character,;
						cAgencia as character,;
						cConta as character,;
						cNroDoc as character,;
						nValor as numeric,;
						dVencto as date)

Local cCodigoBar	:= "" as character
Local cValorFinal   := StrZero(nValor * 100,10) as character
Local cNN			:= StrZero(Val(Substr(cNroDoc,1,11)),11) as character
Local cFator      	:= StrZero(dVencto - ctod("07/10/97"),4) as character
Local cDigBar 		:= " " as character										// dígito verificador do código de barras

// Primeira parte - Posição 01 a 19
cCodigoBar := cBanco + "9" + cDigBar + cFator + cValorFinal

// Segunda parte - Campo Livre
cCodigoBar += SubStr(cAgencia,1,4)								//Tamanho 04 - Posição 20 a 23
cCodigoBar += "09"												//Tamanho 02 - Posição 24 a 25
cCodigoBar += cNN												//Tamanho 11 - Posição 26 a 36
cCodigoBar += "0118788"											//Tamanho 07 - Posição 37 a 43
cCodigoBar += "0"												//Tamanho 01 - Posição 44

// Adiciona dígito verificador a posição 5
cCodigoBar := calcDigBar(cCodigoBar)

Return {cCodigoBar,"",cNN}

/*/{Protheus.doc} calcDigBar
	(Cálculo do dígito verificador do código de barras)
	@type Static Function
	@author Calabro'
	@since 13/10/2003
	@version version
	@param cCodCalc, character, (Codigo de barras a ser calculadoo digito verificador)
	@return return, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function calcDigBar(cCodCalc as character)

Local nFator	:= 0 as numeric
Local nTot		:= 0 as numeric
Local nDigito	:= 0 as numeric
Local nResto	:= 0 as numeric

// Retira posição 5 para cálculo do dígito verificador
cCodCalc := SubStr(cCodCalc,1,4) + SubStr(cCodCalc,6,39)

n := Len(cCodCalc)		// quantidade de posições (43)
nFator := 2				// Fator inicial

// Varre as posições da direita para a esquerda
While n > 0
	
	If nFator == 10
		nFator := 2
	EndIf
	
	nTot += Val(SubStr(cCodCalc, n, 1)) * nFator
	
	nFator++
	n--
EndDo

// Resto da divisão por 11
nResto := Mod(nTot,11)

// Subtrai de 11
nDigito := 11 - nResto

If nDigito == 0 .Or. nDigito == 10 .Or. nDigito == 11
	nDigito := 1
EndIf

// Adiciona dígito verificador
cCodCalc := SubStr(cCodCalc,1,4) + AllTrim(Str(nDigito)) + SubStr(cCodCalc,5,39)

Return cCodCalc

/*/{Protheus.doc} Ret_cBarra
	(Funcao para fazer a composicao do codigo de barras)
	@type Static Function
	@author Calabro'
	@since 13/02/2004
	@version version
	@param cAgencia, character, (Codigo da agencia bancaria)
	@param nValor, numeric, (Valor do titulo)
	@param cCart, character, (Numero da carteira no banco)
	@param cMoeda, character, (Moeda a ser considerada no boleto: 9 - Real)
	@return aRet, array, (Array com dados do codigo de barra:
							[1]-Codigo de Barras
							[2]-Codigo de barras em linha digitavel
							[3]-Nosso numero)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function Ret_cBarra(	cAgencia as character,;
							nValor as numeric,;
							cCart as character,;
							cMoeda as character	)

Local cNosso		:= "" as character
Local cDigNosso		:= "" as character
Local cCampoL		:= "" as character
Local cFatorValor	:= "" as character
Local cLivre		:= "" as character
Local cDigBarra		:= "" as character
Local cBarra		:= "" as character
Local cParte1		:= "" as character
Local cDig1			:= "" as character
Local cParte2		:= "" as character
Local cDig2			:= "" as character
Local cParte3		:= "" as character
Local cDig3			:= "" as character
Local cParte4		:= "" as character
Local cParte5		:= "" as character
Local cDigital		:= "" as character
Local cX6SantSof	:= "" as character

Local aRet			:= {} as array

cAgencia:= STRZERO(Val(cAgencia),4)
cNosso 	:= ""

If SA6->A6_COD == "001"
	
	// Nosso Numero
	If !Empty(SE1->E1_NUMBCO)
		cNosso := SE1->E1_NUMBCO
	Else
		cNosso := GetMV("ES_SQNUMBB",, "0")
		cNosso := StrZero(Val(cNosso)+1,10)
		
		// Gravo o numero sequencia do Banco do Brasil no Arquivo de Parametros
		PutMV("ES_SQNUMBB",cNosso)
	EndIf
	
	
	cFatorValor  := fator1() + Strzero(nValor * 100,10)
	cConvenio := "1225233"
	
	cCampoL := "000000" + cConvenio + alltrim(cNosso) + cCart
	
	cLivre 	:= cBanco + cMoeda + cFatorValor + cCampoL
	
	// campo do codigo de barra
	cDigBarra := CALC_Dp( cLivre )

	// Código Banco (3) + Moeda (1) + DAC código barras (1) + Fator Venc (4) + Valor (10) + cCampoL
	cBarra    := Substr(cLivre,1,4) + cDigBarra + cFatorValor + Substr(cCampoL,1,25)

	// composicao da linha digitavel
	cParte1  := cBanco + cMoeda + SUBSTR(cCampoL,1,5)
	cDig1    := DIGIT0001( cParte1 )
	cParte2  := SUBSTR(cCampoL,6,10)
	cDig2    := DIGIT0001( cParte2 )
	cParte3  := SUBSTR(cCampoL,16,10)
	cDig3    := DIGIT0001( cParte3 )
	
	cParte4  := " " + cDigBarra + " "
	cParte5  := cFatorValor
	
	cDigital := substr(cParte1,1,5) + "." + substr(cparte1,5,4) + cDig1 + " "
	cDigital += substr(cParte2,1,5)	+ "." + substr(cparte2,6,5) + cDig2 + " "
	cDigital += substr(cParte3,1,5)	+ "." + substr(cparte3,6,5) + cDig3 + " "
	cDigital += cParte4
	cDigital += cParte5

ElseIf SA6->A6_COD == "341"

	// Nosso Numero
	If !Empty(SE1->E1_NUMBCO)
		cNosso 		:= alltrim(SE1->E1_NUMBCO)
		cDigNosso  	:= CALC_diE(cCart + cNosso)
		cNosso		:= cNosso + cDigNosso
	Else
		cNosso   := GetMV("ES_SQNUMIT",, "0")
		cDigNosso:= CALC_diE(cCart + cNosso)
		cNosso	:= cNosso + cDigNosso
	EndIf
	
	cNosso := Alltrim(cNosso)
	
	If nValor > 0
		cFatorValor  := fator1() + Strzero(nValor * 100,10)
	Else
		cFatorValor  := fator1() + strzero(SE1->E1_VALOR * 100,10)
	EndIf

	//	Carteira (3) + Nosso Número (8) + DAC [Agência /Conta/Carteira/Nosso Número](1) + Agencia (4) + Conta (5) + DAC [Agência/Conta Corrente] (1) + 3 zeros
	// cCampoL := cCart + cNosso + "0174326264000"
	cCampoL := cCart + cNosso + AllTrim(SA6->A6_AGENCIA) + AllTrim(SA6->A6_NUMCON) + AllTrim(SA6->A6_DVCTA) + "000"

	cLivre 	:= cBanco + cMoeda + cFatorValor + cCampoL

	// campo do codigo de barra
	cDigBarra := CALC_Dp( cLivre )

	// Código Banco (3) + Moeda (1) + DAC código barras (1) + Fator Venc (4) + Valor (10) + cCampoL
	cBarra := cBanco + cMoeda + cDigBarra + cFatorValor + Substr(cCampoL,1,25)

	// composicao da linha digitavel
	cParte1  := cBanco + cMoeda + SUBSTR(cCampoL,1,5)
	cDig1    := DIGIT0001( cParte1 )
	cParte2  := SUBSTR(cCampoL,6,10)
	cDig2    := DIGIT0001( cParte2 )
	cParte3  := SUBSTR(cCampoL,16,10)
	cDig3    := DIGIT0001( cParte3 )

	cParte4  := " " + cDigBarra + " "
	cParte5  := cFatorValor

	cDigital := substr(cParte1,1,5)	+ "." + substr(cparte1,6,4) + cDig1 + " "
	cDigital += substr(cParte2,1,5)	+ "." + substr(cparte2,6,5) + cDig2 + " "
	cDigital += substr(cParte3,1,5)	+ "." + substr(cparte3,6,5) + cDig3 + " "
	cDigital += cParte4
	cDigital += cParte5

ElseIf SA6->A6_COD == "422"

	// Montagem do NOSSO NUMERO
	If !Empty(SE1->E1_NUMBCO)
		cNosso := Left(SE1->E1_NUMBCO,8)
	Else
		cNosso := GetMV("ES_SQNUMSF",, "0")
		cNosso := StrZero(Val(cNosso)+1,8)
		// Gravo o numero sequencia do Banco Safra no Arquivo de Parametros
		PutMV("ES_SQNUMSF",cNosso)
	EndIf

	// Complementa o digito do Nosso Numero
	cNosso := cNosso+Modulo10("1248"+"02341"+"109"+cNosso)
	cNosso := Alltrim(cNosso)

	// Composicao da informacao do codigo de barras
	cB001003 := "341"
	cB004004 := "9"
	CB006009 := Fator1()
	cB010019 := Strzero(nValor * 100,10)
	cB020044 := "109"+cNosso+"1248023416"+"000"
	cB005005 := CALC_Dp(cB001003+cB004004+cB006009+cB010019+cB020044)

	// Codigo de barras completo
	cBarra  := cB001003+cB004004+cB005005+cB006009+cB010019+cB020044

	// Composicao da Linha digitavel
	cDigital := Substr(cBarra,01,03)
	cDigital += Substr(cBarra,04,01)
	cDigital += Substr(cBarra,20,05)
	cDigital += DIGIT0001(Substr(cBarra,01,03)+Substr(cBarra,04,01)+Substr(cBarra,20,05))
	cDigital += Substr(cBarra,25,10)
	cDigital += DIGIT0001(Substr(cBarra,25,10))
	cDigital += Substr(cBarra,35,10)
	cDigital += DIGIT0001(Substr(cBarra,35,10))
	cDigital += Substr(cBarra,05,01)
	cDigital += Substr(cBarra,06,14)

	//Composicao / Formatacao da Linha digitavel
	//42297.00408 00002.782472 26173.001111 8 1001000008084
	//XXXXX.XXXXX XXXXX.XXXXXX XXXXX.XXXXXX X XXXXXXXXXXXXX
	cDigital :=;
	Substr(cDigital,01,05) + "." + ;
	Substr(cDigital,06,05) + " " + ;
	Substr(cDigital,11,05) + "." + ;
	Substr(cDigital,16,06) + " " + ;
	Substr(cDigital,22,05) + "." + ;
	Substr(cDigital,27,06) + " " + ;
	Substr(cDigital,33,01) + " " + ;
	Substr(cDigital,34,14)
	
ElseIf SA6->A6_COD $ "033/#/637"

	// Montagem do NOSSO NUMERO
	If !Empty(SE1->E1_NUMBCO)
		cNosso := Left(SE1->E1_NUMBCO,12)
	Else

		cX6SantSof := If(SA6->A6_COD == "033", "ES_SQNUMSA", "ES_SQNUMSO")

		// Gravo o numero sequencia do Banco Santander no Arquivo de Parametros
		cNosso := GetMV(cX6SantSof,, "0")
		cNosso := StrZero(Val(cNosso) + 1 ,12)
		PutMV(cX6SantSof, cNosso)
	EndIf

	cB001003 := "033"
	cB004004 := "9"
	CB006009 := Strzero(dVENCREA - STOD("19971007"),4)
	cB010019 := Strzero(nValor * 100,10)
	cB020020 := "9"
	cB021027 := "4845013"
	cB028040 := cNosso+Modulo11(cNosso)
	cB041041 := "0"
	cB042044 := "102"
	cB005005 := Modulo11(cB001003+cB004004+CB006009+cB010019+cB020020+cB021027+cB028040+cB041041+cB042044)

	// Codigo de barras completo
	cBarra  := cB001003+cB004004+cB005005+CB006009+cB010019+cB020020+cB021027+cB028040+cB041041+cB042044

	// Composicao da Linha digitavel
	_cBloco1 := cB001003+cB004004+cB020020+Substr(cB021027,01,04)
	//          XXX      X         X        XXXX
	_cBloco1 += Modulo10(_cBloco1)
	//          X
	_cBloco2 := Substr(cB021027,05,03)+Left(cB028040,7)
	//          XXX                     XXXXXXX
	_cBloco2 += Modulo10(_cBloco2)
	//          X
	_cBloco3 := Substr(cB028040,08,06)+cB041041+cB042044
	//          XXXXXX                  X        XXX
	_cBloco3 += Modulo10(_cBloco3)
	//          X
	_cBloco4 := cB005005
	//          X
	_cBloco5 := CB006009+cB010019
	//          XXXX      XXXXXXXXXX

	// Composicao / Formatacao da Linha digitavel
	// 42297.00408 00002.782472 26173.001111 8 1001000008084
	// XXXXX.XXXXX XXXXX.XXXXXX XXXXX.XXXXXX X XXXXXXXXXXXXX
	cDigital += _cBloco1+_cBloco2+_cBloco3+_cBloco4+_cBloco5
	cDigital :=;
	Substr(cDigital,01,05) + "." + ;
	Substr(cDigital,06,05) + " " + ;
	Substr(cDigital,11,05) + "." + ;
	Substr(cDigital,16,06) + " " + ;
	Substr(cDigital,22,05) + "." + ;
	Substr(cDigital,27,06) + " " + ;
	Substr(cDigital,33,01) + " " + ;
	Substr(cDigital,34,14)
EndIf

AAdd(aRet,cBarra)		// Codigo de Barras
AAdd(aRet,cDigital)		// Codigo de barras em linha digitavel
AAdd(aRet,cNosso)		// Nosso numero

Return aRet

/*/{Protheus.doc} CALC_diE
	(Para calculo do nosso numero do banco do brasil)
	@type Static Function
	@author Calabro'
	@since 13/02/2004
	@version version
	@param cNosso, character, (Nosso numero do boleto)
	@return _cDac, character, (Digito de auto conferencia - DAC - calculada)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function CALC_diE(cNosso as character)

// Local _cCodigo		:= "017432626" + cNosso as character
Local _cCodigo		:= AllTrim(SA6->A6_AGENCIA) + AllTrim(SA6->A6_NUMCON) + cNosso as character
Local _cDac			:= "" as character

Local _nSoma		:= 0 as numeric
Local _nItem		:= 0 as numeric
Local nVarAux		:= 0 as numeric
Local nX			:= 0 as numeric

For nX := 1 to Len(_cCodigo)
	
	_nItem := val(substr(_cCodigo,nX,1))
	
	// Quando estiver em uma casa par, multiplica por dois
	If mod(nX,2) == 0
		If _nItem * 2 >= 10
			_nSoma += (_nItem * 2) - 9	// Exemplo do calculo 6*2 = 12 logo 1+2 = 3 ou 12 - 9 = 3
		Else
			_nSoma += _nItem * 2
		EndIf
	Else
		_nSoma += _nItem
	EndIf
Next nX

nVarAux := mod(_nSoma,10)

// Se resto da divisão for zero, dac é zero
If nVarAux == 0
	_cDac := "0"
Else
	_cDac := alltrim(str(10 - nVarAux))
Endif

Return(_cDac)

/*/{Protheus.doc} DIGIT0001
	(Funcao para calculo dos digitos verificadores da linha digitavel)
	@type Static Function
	@author Calabro'
	@since 13/02/2004
	@version version
	@param cVariavel, character, (Trecho do codigo de barras a calcular o digito verificador)
	@return cDigVer, character, (Digito verificador calculado)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function DIGIT0001(cVariavel as character)

Local cBase		:= "" as character
Local cValor	:= "" as character

Local nVarAux	:= 0 as numeric
Local nSumDig	:= 0 as numeric
Local nBase		:= 0 as numeric
Local nSegVar	:= 2 as numeric
Local nDigito	:= 0 as numeric
Local nDezena	:= 0 as numeric

cBase := cVariavel
nBase := Len(cBase)
nDigito := nBase

While nDigito >= 1
	nVarAux   	:= Val(SubStr(cBase, nDigito, 1)) * nSegVar
	nSumDig 	:= nSumDig+If (nVarAux < 10, nVarAux, (nVarAux - 9))
	nSegVar 	:= 3 - nSegVar
	nDigito	:= nDigito - 1
EndDo

cValor	:= AllTrim(Str(nSumDig,12))
nDezena	:= Val(AllTrim(Str(Val(SubStr(cValor,1,1))+1,12))+"0")
nVarAux := nDezena - nSumDig

If nVarAux >= 10
	nVarAux := 0
EndIf

Return Str(nVarAux,1,0)

/*/{Protheus.doc} Fator1
	(Calculo do FATOR1  de vencimento para linha digitavel)
	@type Static Function
	@author Calabro'
	@since 13/02/2004
	@version version
	@return cFator, character, (Fator de vencimento da linha digitavel)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static function Fator1()

Local cData		:= "" as character

If Len(AllTrim(SubStr(DToC(dVencRea),7,4))) = 4
	cData := SubStr(DToC(dVencRea),7,4)+SubStr(DToC(dVencRea),4,2)+SubStr(DToC(dVencRea),1,2)
Else
	cData := "20"+SubStr(DToC(dVencRea),7,2)+SubStr(DToC(dVencRea),4,2)+SubStr(DToC(dVencRea),1,2)
EndIf
cFator := Str(1000+(SToD(cData) - SToD("20000703")),4)

Return(cFator)

/*/{Protheus.doc} CALC_Dp
	(Calculo do digito do nosso numero)
	@type Static Function
	@author Calabro'
	@since 13/02/2004
	@version version
	@param cVariavel, character, (Variavel base para calculo do digito)
	@return cFator, character, (Fator de vencimento da linha digitavel)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function CALC_Dp(cVariavel as character)

Local cBase		:= "" as character

Local nVarAux	:= 0 as numeric
Local nSumDig	:= 0 as numeric
Local nBase		:= 0 as numeric
Local nBase2	:= 2 as numeric
Local nDigito	:= 0 as numeric

cBase := cVariavel
nBase := Len(cBase)
nSumDig := 0
nVarAux := 0
nDigito := nBase

While nDigito >= 1
	If nBase2 >= 10
		nBase2 := 2
	EndIf
	nVarAux := Val(SubStr(cBase, nDigito, 1)) * nBase2
	nSumDig := nSumDig + nVarAux
	nBase2 := nBase2 + 1
	nDigito := nDigito - 1
EndDo

nVarAux := Mod(nSumDig,11)
If nVarAux == 0 .or. nVarAux == 1 .or. nVarAux >= 10
	nVarAux := 1
Else
	nVarAux := 11 - nVarAux
EndIf

Return Str(nVarAux,1,0)

/*/{Protheus.doc} MontaLinha
	(Monta linha digitavel para impressao de boletos do banco bradesco)
	@type Static Function
	@author Calabro'
	@since 13/02/2004
	@version version
	@param dDataCalc, date, (Data a ser considerada no calculo)
	@return cLineDig, character, (Linha digitavel concatenada)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function MontaLinha(dDataCalc as date)

Local cDvLinh		:= "" as character
Local cLineDig		:= "" as character
Local cFatorVcto	:= CToD("") as character
Local cBloco		:= "" as character

dDataCalc := If(Empty(dDataCalc), CToD(""), dDatabase)

cFatorVcto := Str( ( dDataCalc - Ctod("07/10/1997") ), 4 )

// Código de barras
cCodBarras := aCB_RN_NN[1]

//Digito Verificador do Codigo de Barras
cDVercb := SubStr(cCodBarras,5,1)

// Primeiro Campo
// Codigo do Banco (3) + Moeda (1) + 5 primeiras posições do campo livre do Cod Barras --> Tamanho 9 +  dígito verificador
cBloco := Substr(cCodBarras,1,3) + Substr(cCodBarras,4,1) + Substr(cCodBarras,20,5)
cDvLinh := DV_LINHA(cBloco)

cLineDig := Substr(cCodBarras,1,3) + Substr(cCodBarras,4,1) + Substr(cCodBarras,20,1) + "." + Substr(cCodBarras,21,4) + cDvLinh + Space(2)

// Segundo Campo
// Posições 6 a 15 do campo livre --> tamanho 10 + digito verificador
cBloco    := Substr(cCodBarras,25,10)
cDvLinh    := DV_LINHA(cBloco)
cLineDig   += Substr(cBloco,1,5) + "." + Substr(cBloco,6,5) + cDvLinh + Space(2)

// Terceiro Campo
// Posições 6 a 15 do campo livre --> tamanho 10 + digito verificador
cBloco  := Substr(cCodBarras,35,10)
cDvLinh  := DV_LINHA(cBloco)
cLineDig += Substr(cBloco,1,5) + "." + Substr(cBloco,6,5) + cDvLinh + Space(2)

// Quarto Campo
// Dígito verificador do código de barras --> Tamanho 1
cLineDig += cDVercb + Space(2)


// Quinto Campo
// Fator de vencimento (4) + valor do documento (10)
cLineDig  := cLineDig + cFatorVcto + StrZero(Round(nVlrBol,2) * 100,10)

Return cLineDig

/*/{Protheus.doc} DV_LINHA
	(Calculo do Digito da Linha Digitavel)
	@type Static Function
	@author Calabro'
	@since 13/02/2004
	@version version
	@param cBloco, character, (Bloco do codigo de barras para calcular o digito verificador)
	@return cDigito, character, (Digito verificador calculado)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function DV_LINHA(cBloco as character)

Local cDigito	:= "" as character

Local nPeso		:= 2 as numeric 	//Inicia peso em 2
Local nCont		:= 0 as numeric
Local nX		:= 0 as numeric
Local nResto	:= 0 as numeric
Local nDezena	:= 0 as numeric

//Varre do fim ao início
For nX := Len(cBloco) to 1 Step -1
	
	//Se a soma der 10 ou mais, soma os algarítmos (exemplo: 2x7 = 14 --> 1+4 = 5)
	If Val(SubStr(cBloco, nX, 1)) * nPeso >= 10
		
		nVal  := Val(SubStr(cBloco, nX, 1)) * nPeso
		nCont += Val(SubStr(Str(nVal, 2), 1, 1)) + Val(SubStr(Str(nVal, 2), 2, 1))
	Else
		nCont += Val(SubStr(cBloco, nX, 1)) * nPeso
	Endif
	
	If nPeso == 1
		nPeso := 2
	Else
		nPeso := 1
	Endif
Next nX

nDezena  := Substr(Str(nCont, 2) ,1 , 1)
nResto   := ( (Val(nDezena) + 1) * 10) - nCont

If nResto == 10
	cDigito := "0"
Else
	cDigito := Str(nResto,1)
Endif

Return cDigito

/*/{Protheus.doc} Modulo11
	(Calcula o modulo 11 para a string enviada por parametro)
	@type Static Function
	@author Calabro'
	@since 31/07/2014
	@version version
	@param cStr, character, (String a ser considerada no calculo)
	@param nMultIni, numeric, (Fator de multiplicacao inicial)
	@param nMultFim, numeric, (Fator de multiplicacao final)
	@return cRet, character, (Digito convertido por modulo 11)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function Modulo11(cStr as character,nMultIni as numeric, nMultFim as numeric)

Local cChar		:= "" as character

Local nX		:= 0 as numeric
Local nModulo	:= 0 as numeric
Local nMult		:= 0 as numeric

nMultIni := Iif( Empty(nMultIni), 2, nMultIni )
nMultFim := Iif( Empty(nMultFim), 9, nMultFim )

nMult := nMultIni
cStr := AllTrim(cStr)

For nX := Len(cStr) to 1 Step -1
	cChar := Substr(cStr, nX, 1)
	If isAlpha( cChar )
		Help(" ", 1, "ONLYNUM")
		Return .f.
	End
	nModulo += Val(cChar)*nMult
	nMult:= IIf(nMult==nMultfim,2,nMult+1)
Next nX

nRest := nModulo % 11

nRest := IIf(nRest==0 .or. nRest==1, 1, 11 - nRest)

Return Str(nRest,1)

/*/{Protheus.doc} RFA01EnvBol
	(Rotina que envia e-mail de boletos ou boletos + DANFE)
	@type Static Function
	@author Calabro'
	@since 12/07/2015
	@version version
	@param cLocal, character, (Diretorio onde encontra os boletos PDF gerados)
	@param aTitulo, array, (Array com as informacoes dos titulos a serem enviados por e-mail)
	@param lJob, logical, (Verifica se processo esta' em modo job ou via tela)
	@return Nil, Nulo
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function RFA01EnvBol(cLocal as character,;
							aTitulo as array,;
							lJob as logical)

Local cTitulo		:= "" as character											// registro
Local cArqPDF		:= "" as character											// Nome do arquivo
Local cCadWF		:= AllTrim(GetMV("ES_MAILBOX",, "")) as character			// Nome da conta Workflow cadastrada
Local cPopAdd		:= "" as character											// Endereço do Servidor POP
Local cSmtpAdd		:= "" as character											// Endereço do Servidor SMTP
Local cUser			:= AllTrim(GetMv("ES_RF01CNT",, "noreply@" + Lower(AllTrim(SM0->M0_NOME)) + ".com.br"))
Local cPass			:= "" as character											// Senha do Servidor
// Local cEmailCCo		:= AllTrim(GetMv("ES_MAILCCO",, "")) as character			// Email a qual irá a copia oculta
Local cRecebe		:= "" as character											// Retorno -> Utilizado para verificar qual o tipo de email o usuario selecionou
Local cChaveNfe		:= "" as character											// Guarda a chave da Nota Fiscal
Local cHtml			:= "" as character											// Guarda o Texto feito em HTML
Local cNFEs			:= "" as character											// Pega o Numero da Nota Fiscal de Serviço
Local _cCliente		:= "" as character
Local _cLoja		:= "" as character
Local cLayHTML		:= BuscaHTML(AllTrim(GetMV("ES_RF01HTM",, ""))) as character

Local nCont			:= 0 as numeric												// Contador
Local nX			:= 0 as numeric												// Contador
Local nPos			:= 0 as numeric												// Posicao do vetor
Local nErro			:= 0 as numeric												// Erro da funcao
Local nPopPort		:= 0 as numeric												// Porta do Servidor POP     (110)
Local nSmtpPort		:= 0 as numeric												// Porta do Servidor SMTP    (587)
Local nConfirmou	:= 0 as numeric												// Retorno -> Verifica se o usuario confirmou ou cancelou através da rotina (MDTEC02)
Local nOpc			:= 0 as numeric	 

Local lAuth			:= GetMV('ES_RF01AUT',, .F. ) as logical
Local lPermite		:= .F. as logical											// Parâmetro que permite ou não envio de link de RPS com o campo Chave de Acesso em branco

Local aFiles		:= {} as array												// Localiza todos os registros contigos na na pasta informada
Local aTotArq		:= {} as array												// Verifica a quantidade de registro na pasta
Local aBolEnv		:= {} as array												// Vetor que verifica se existe boletos a serem enviados
Local aFilBol		:= {} as array												// Vetor que armazena os registros que serão enviados e excluidos
Local aEmails		:= {} as array												// Array para o Parambox para adicionar mais e-mails

Local oMailServer := TMailManager():New() as object								 // Objeto função de enviar e-mail
Local oMessage    := TMailMessage():New() as object								 // Atributo do Objeto

DbSelectArea("WF7")
DbSetOrder(1)		//WF7_FILIAL+WF7_PASTA
If WF7->( DbSeek(xFilial("WF7")+cCadWF))
	cPopAdd := AllTrim(WF7->WF7_POP3SR)
	cSmtpAdd := AllTrim(WF7->WF7_SMTPSR)
	nPopPort := WF7->WF7_POP3PR
	nSmtpPort := WF7->WF7_SMTPPR
	cUser := AllTrim(WF7->WF7_CONTA)
	cPass := AllTrim(WF7->WF7_SENHA)
Else
	cPopAdd := ""
	cSmtpAdd := "wikitec.smtp.com.br"
	nPopPort := 0
	nSmtpPort := 587
	cUser := "teste@wikitec.com.br"
	cPass := "wikitec123"
EndIf

// Busca todos os arquivos do local em pdf e guarda no vetor
aFiles  := Directory(cLocal + "*.PDF", "D") 

// Apresenta os dados dos arquivos encontrado na pasta
nCont := Len( aFiles )
For nX := 1 to nCont
	cArq := aFiles[nX,1]
	aAdd(aTotArq, cArq )
Next nX

nCont := Len(aTitulo)
nX := 1

While nX <= nCont
	
	cTitulo:= AllTrim(aTitulo[nX][1])+".PDF"
	nPos := aScan(aTotArq, {|x| Upper(x) == Upper(cTitulo)}) //Pesquisa no vetor
	
	If nPos == 0
		MsgAlert("Não foi possivel enviar o boleto [ "+cTitulo+" ] pois o mesmo não encontra - se na pasta [ "+cLocal+" ] ")
	Else
		aAdd(aBolEnv,{cTitulo})
	EndIf
		
	nX++
	
EndDo

nX:= 1
nCont := Len(aBolEnv)
nPos := 0

While nX <= nCont
	
	cArqPDF := aBolEnv[nX][1]
	
	nPos:= aScan(aFilBol, {|x| x == cArqPDF}) //Pesquisa no vetor
	
	If nPos == 0
		aAdd(aFilBol,cLocal+cArqPDF)
	EndIf
	
	nX++
	
EndDo

nCont := Len(aBolEnv)

// Verifica se exitem boletos a serem enviados *
If nCont > 0
	
	// Posiciona na tabela de SA1 para *
	// pegar os dados do cliente
	DbSelectArea("SA1")
	DbSetOrder(1)
	If DbSeek(xfilial("SA1")+aTitulo[1][5]+aTitulo[1][6])
		
		// Pega as configurações informadas do servidor
		oMailServer:Init( cPopAdd, cSmtpAdd, cUser, cPass, nPopPort, nSmtpPort )
		
		// Valida as configurações do servidor para envio de e-mail*
		If( (nErro := oMailServer:SmtpConnect()) != 0 )
			conout( "Não conectou.", oMailServer:GetErrorString( nErro ) )
			Return
		EndIf
		
		// Autenticação do Servidor
		If nErro == 0 .And. lAuth
			nErro := oMailServer:smtpAuth(cUser, cPass)
			If nErro <> 0
				GeraMsgErro("[ERROR]Falha ao autenticar: " + oMailServer:getErrorString(nErro), lJob)
				oMailServer:smtpDisconnect()
				Return
			Endif
		EndIf
		
		// Limpa o objeto caso existe alguma informação  *
		oMessage:Clear()

		// Traz o e-mail do contato do cliente filtrado pela codigo do cliente e loja
		// atraves da rotina MDTEC02 -> filtro de contatos cadastrado para o cliente
		
		nConfirmou 	:= 1
		
		// Busca email do cadastro de cliente
		cRecebe 	:= Alltrim(SA1->A1_EMAIL) //Email

		If Vazio(cRecebe)
			GeraMsgErro("Cadastro de email selecionado em branco.", lJob)
			nConfirmou := 0
		EndIf

		// Se for email do cliente ou usuário selecionou um email de contato, nConfirmou == 1
		If nConfirmou == 1 .AND. !lJob

			aAdd(aEmails,{1,"e-mails:",Space(100),"","","","",80,.T.})
			While nOpc == 0 .OR. nOpc == 3 
				cAlert 	:= "Os dados do cliente para envio do Boleto estão corretos ? "+CRLF+CRLF
				
				cAlert 	+= "Codigo:  " + SA1->A1_COD +" Loja: "+SA1->A1_LOJA +CRLF
				cAlert 	+= "Cliente: " + SA1->A1_NOME +CRLF
				
				cAlert 	+= "Email: "   + cRecebe + CRLF
				
				cAlert 	+= "Titulo: "  + aTitulo[1][2]+CRLF
				cAlert 	+= "Prefixo: " + aTitulo[1][3]+CRLF
				
				nOpc 	:= Aviso("Aviso", cAlert ,{'Sim','Não','&Adic. E-mails'},3, "Envio de Boleto - EnviaEmail")
				If nOpc == 3
					ParamBox(aEmails ,"Parametros ",aRet)
					If Len(aRet) > 0 .And. !Empty(aRet[1])
						cRecebe += ";" + AllTrim(aRet[1])
					EndIf
				EndIf
			EndDo
		EndIf

		// Caso a Opção seja "Não"
		// Exclui os Boletos/O.S Gerados
		// nConfirmou == 0 indica que usuário não selecionou email do contato
		// nOpc == 2 indica que usuário cancelou
		If nConfirmou == 0 .Or. nOpc == 2
			
			// Exclui O.S e Boletos Enviada  *
			For nX := 1 to len(aFilBol)
				If FErase(aFilBol[nX]) == -1
					GeraMsgErro("Falha ao tentar deletar o Arquivo ( FError"+str(ferror(),4)+ ")", lJob)
				EndIf
			Next nX
			
			// Retorna função - não envia email
			Return Nil
			
		EndIf

		_cCliente := Alltrim(SA1->A1_COD)
		_cLoja    :=Alltrim(SA1->A1_LOJA)

		oMessage:cFrom := GetMv("ES_BOLFROM",,"noreply@nomedaempresa.com.br")

		// Rotina de Envio Automatico de Boleto *
		
		oMessage:cTo := cRecebe //E-mail do Cadastro de Clientes

		oMessage:cBcc    := AllTrim(GetMv("ES_MAILCCO",, "")) //Email de Copia Oculta

		oMessage:cCc := GetMailCont(_cCliente,_cLoja)
		oMessage:cCc += cRecebe

		// Analisa as condicoes em que o envio pode ocorrer sem chaveNFE
		// Parâmetro que permite ou não envio de chave da nota em branco
		// .T. Envia link com chave em branco
		lPermite 	:= .F.
		cChaveNfe 	:= ""

		// Localiza Chave Nfe
		__aArea := GetArea()

		__lRPS  := .F.
		dbSelectArea("SF2")
		dbSetOrder(1)
		If dbSeek(xFilial("SF2") + aTitulo[1][2] + aTitulo[1][3])

			//Se nota de serviço
			If Upper(AllTrim(SF2->F2_ESPECIE)) == 'RPS'
				
				__lRPS := .T.

				// Envio de Link de RPS apenas para filiais com Link Preenchido
				If !Empty(cChaveNfe) 
				
					//Se não permite envio de link de chave eletrônica em branco, e F2_CODNFE estiver em branco
					If !lPermite .And. Vazio(SF2->F2_CODNFE)
						cChaveNfe := ""
					Else
						cChaveNfe := StrTran(cChaveNfe,'SM0->M0_INSCM',AllTrim(SM0->M0_INSCM))
						cChaveNfe := StrTran(cChaveNfe,'SF2->F2_NFELETR',AllTrim(SF2->F2_NFELETR))
						cChaveNfe := StrTran(cChaveNfe,'SF2->F2_CODNFE',StrTran(Upper(AllTrim(SF2->F2_CODNFE)),'-',''))
						
						cNFEs := AllTrim(SF2->F2_NFELETR)
					EndIf
				EndIf
			Else
				cChaveNfe := SF2->F2_CHVNFE
			EndIf
		EndIf

		RestArea(__aArea)

		// Montagem do HTML para cliente
		// Verifico se existe pasta definida para buscar HTML por filial
		If !Empty(cLayHTML) .AND. BuscaHTML(cLayHTML)
			cHtml := BuscaHTML(cLayHTML)
		Else
			cHtml := MontaHtml()
		EndIf

		oMessage:cSubject        := "Atenção: Ref. Boleto(s) e Link de Nota Fiscal Nº "+IIF(cNFEs == "" ,aTitulo[1][2],cNFEs)+" - "+aTitulo[1][3]
		oMessage:cBody       := cHtml // -> Boleto + Nota

		// Para solicitar confimação de envio
		If GetMv("ES_BOLCNFM",, .F.)
			oMessage:SetConfirmRead( .T. )
		EndIf
		
		// Adiciona um anexo
		For nX := 1 to len(aFilBol)
			oMessage:AttachFile( aFilBol[nX] )
		Next nX

		If( (nErro := oMessage:Send( oMailServer )) != 0 )
			GeraMsgErro("Não enviou o e-mail: " + oMailServer:GetErrorString( nErro ), lJob)
			Return Nil
		Else
			// Grava log de envio e reenvio dos titulos - Flavio Macieira
			DbSelectArea("SE1")
			DbSetOrder(1)
			For nX := 1 to len(aTitulo)
				If SE1->(DbSeek(aTitulo[nX][10]+aTitulo[nX][3]+aTitulo[nX][2]+aTitulo[nX][4]+aTitulo[nX][11]))

					If SE1->(FieldPos("E1_XDENBOL")) > 0

						RecLock("SE1",.F.)
							SE1->E1_XDENBOL := DATE() //Grava a data do Envio do Boleto
						SE1->(MsUnlock()) 
					EndIf
				EndIf
			Next nX

			// Rotina de Envio Automatico de Boleto *
			// Grava a data que foi enviada para o cliente
			
			//Exclui O.S e Boletos Enviada  *
			For nX := 1 to Len(aFilBol)
				If FERASE(aFilBol[nX]) == -1
					GeraMsgErro('Falha ao tentar deletar o Arquivo ( FError'+str(ferror(),4)+ ')', lJob)
				EndIf
			Next nX
		EndIf
		
		If( (nErro := oMailServer:SmtpDisconnect()) != 0 )
			GeraMsgErro("Não desconectou: " + oMailServer:GetErrorString( nErro ), lJob)
			Return
		EndIf
		
		
	Else
		GeraMsgErro("Cliente não encontrado!", lJob)
	EndIf
EndIf

Return Nil

/*/{Protheus.doc} GetMailCont
	(Rotina que coleta os Emails do cadastro de Contatos)
	@type Static Function
	@author Calabro'
	@since 20/03/2019
	@version version
	@param _cCliente, character, (Codigo do cliente)
	@param _cLoja, character, (Codigo da loja do cliente)
	@return cRetMail, character, (E-mails relacionados ao cliente do cadastro de contatos)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function GetMailCont(_cCliente as character, _cLoja as character)

Local cRetMail := "" as character
Local cAlias   := GetNextAlias() as character
Local cQuery   := "" as character

cQuery	:= " SELECT U5_EMAIL  " + CRLF
cQuery  += " FROM " + RetSQLTab("AC8") + CRLF
cQuery  += " JOIN " + RetSQLTab("SU5") + CRLF
cQuery  += "   ON SU5.U5_CODCONT = AC8.AC8_CODCON " + CRLF
cQuery  += "  AND SU5.D_E_L_E_T_<>'*'  " + CRLF
cQuery  += "WHERE AC8.D_E_L_E_T_<>'*' " + CRLF
cQuery  += "  AND AC8_CODENT = '"+_cCliente+"'+'"+_cLoja+"' " + CRLF
cQuery  += "  AND SU5.U5_EMAIL LIKE '%@%' " + CRLF

MpSysOpenQuery(cQuery, cAlias)

dbSelectArea(cAlias)
dbGoTop()
While (cAlias)->( !EOF())
	
	If !Vazio(cRetMail)
		cRetMail += "; "
	EndIf
	
	cRetMail += Alltrim((cAlias)->U5_EMAIL)
	
	(cAlias)->(DbSkip())
	
EndDo

Return cRetMail

/*/{Protheus.doc} GeraMsgErro
	(Gera mensagem de erro em tela - se nao for job - e no console do server)
	@type Static Function
	@author Calabro'
	@since 20/03/2019
	@version version
	@param cMensagem, character, (Texto a ser considerado na mensagem)
	@param lJob, logical, (Variavel de controle para identificar se processo esta em job ou nao)
	@return Nil, Nulo
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function GeraMsgErro(cMensagem as character, lJob as logical, aBotoes as array)

cMensagem := If(Empty(cMensagem), "", FunName() + DToC(Date()) + Time() + " - Sem mensagem definida.")

aBotoes := If(Len(aBotoes) == 0, {"Sair"}, aBotoes)

If !lJob
	Aviso("Inconsistência", cMensagem, aBotoes,, "Atenção:")
EndIf

ConOut(cMensagem)

Return Nil

/*/{Protheus.doc} MyPerg
(Funcao de perguntas para execucao da rotina)
@author Calabró
@since 31/03/2021
@version 1.0
@return aRet, array, (Array com parametros preenchidos)
@example
(examples)
@see (links_or_references)
/*/

Static Function MyPerg()

Local cTitulo	:= "Parâmetros para gerar boleto"

Local aPergs	:= {}								//Array com os tipos de Parambox
Local aRet		:= {}				 				//Array com o retorno do pergunte
Local aAreaAtu	:= GetArea()

// 1
AAdd(aPergs,{	1,;
				"De Prefixo",;
				Space(TamSX3("E1_PREFIXO")[1]),;
				"",;
				"",;
				"",;
				"",;
				50,;
				.F. })
// 2
AAdd(aPergs,{	1,;
				"Ate Prefixo",;
				Space(TamSX3("E1_PREFIXO")[1]),;
				"",;
				"MV_PAR01 <= MV_PAR02",;
				"",;
				"",;
				50,;
				.F. })
// 3
AAdd(aPergs,{	1,;
				"De Numero",;
				Space(TamSX3("E1_NUM")[1]),;
				"",;
				"",;
				"",;
				"",;
				50,;
				.F. })
// 4
AAdd(aPergs,{	1,;
				"Ate Numero",;
				Space(TamSX3("E1_NUM")[1]),;
				"",;
				"MV_PAR03 <= MV_PAR04",;
				"",;
				"",;
				50,;
				.F. })
// 5
AAdd(aPergs,{	1,;
				"De Parcela",;
				Space(TamSX3("E1_PARCELA")[1]),;
				"",;
				"",;
				"",;
				"",;
				50,;
				.F. })
// 6
AAdd(aPergs,{	1,;
				"Ate Parcela",;
				Space(TamSX3("E1_PARCELA")[1]),;
				"",;
				"MV_PAR05 <= MV_PAR06",;
				"",;
				"",;
				50,;
				.F. })
// 7
AAdd(aPergs,{	1,;
				"De Portador",;
				Space(TamSX3("E1_PORTADO")[1]),;
				"",;
				"",;
				"",;
				"",;
				50,;
				.F. })
// 8
AAdd(aPergs,{	1,;
				"Ate Portador",;
				Space(TamSX3("E1_PORTADO")[1]),;
				"",;
				"MV_PAR07 <= MV_PAR08",;
				"",;
				"",;
				50,;
				.F. })
// 9
AAdd(aPergs,{	1,;
				"De Cliente",;
				Space(TamSX3("E1_CLIENTE")[1]),;
				"",;
				"",;
				"",;
				"",;
				50,;
				.F. })
// 10
AAdd(aPergs,{	1,;
				"Ate Cliente",;
				Space(TamSX3("E1_CLIENTE")[1]),;
				"",;
				"MV_PAR09 <= MV_PAR10",;
				"",;
				"",;
				50,;
				.F. })
// 11
AAdd(aPergs,{	1,;
				"De Loja",;
				Space(TamSX3("E1_LOJA")[1]),;
				"",;
				"",;
				"",;
				"",;
				50,;
				.F. })
// 12
AAdd(aPergs,{	1,;
				"Ate Loja",;
				Space(TamSX3("E1_LOJA")[1]),;
				"",;
				"MV_PAR11 <= MV_PAR12",;
				"",;
				"",;
				50,;
				.F. })
// 13
AAdd(aPergs,{	1,;
				"De Emissao",;
				CToD(""),;
				"",;
				"",;
				"",;
				"",;
				50,;
				.F. })
// 14
AAdd(aPergs,{	1,;
				"Ate Emissao",;
				CToD(""),;
				"",;
				"MV_PAR13 <= MV_PAR14",;
				"",;
				"",;
				50,;
				.F. })
// 15
AAdd(aPergs,{	1,;
				"De Vencimento",;
				CToD(""),;
				"",;
				"",;
				"",;
				"",;
				50,;
				.F. })
// 16
AAdd(aPergs,{	1,;
				"Ate Vencimento",;
				CToD(""),;
				"",;
				"MV_PAR15 <= MV_PAR16",;
				"",;
				"",;
				50,;
				.F. })
// 17
AAdd(aPergs,{	1,;
				"Do Bordero",;
				Space(TamSX3("E1_NUMBOR")[1]),;
				"",;
				"",;
				"",;
				"",;
				50,;
				.F. })
// 18
AAdd(aPergs,{	1,;
				"Ate Bordero",;
				Space(TamSX3("E1_NUMBOR")[1]),;
				"",;
				"MV_PAR17 <= MV_PAR18",;
				"",;
				"",;
				50,;
				.F. })
// 19
AAdd(aPergs,{	1,;
				"Linha Obs 1",;
				Space(80),;
				"",;
				"",;
				"",;
				"",;
				80,;
				.F. })
// 20
AAdd(aPergs,{	1,;
				"Linha Obs 2",;
				Space(80),;
				"",;
				"",;
				"",;
				"",;
				80,;
				.F. })
// 21
AAdd(aPergs,{	1,;
				"Linha Obs 3",;
				Space(80),;
				"",;
				"",;
				"",;
				"",;
				80,;
				.F. })
// 22
AAdd(aPergs,{	4,;
				"Gera Boleto?",;
				.F.,;
				"Se sim, marque esta opção",;
				90,;
				'U_RFIR01VldPar("' + AllTrim(GetMv("ES_FUNBOLE",,"RFINR01")) + '")',;
				.F. })
// 23
AAdd(aPergs,{	4,;
				"Gera Danfe?",;
				.F.,;
				"Se sim, marque esta opção",;
				90,;
				'U_RFIR01VldPar("' + AllTrim(GetMv("ES_FUNDANF",,"RFATR01")) + '")',;
				.F. })
// 24
AAdd(aPergs,{	4,;
				"Gera XML?",;
				.F.,;
				"Se sim, marque esta opção",;
				90,;
				'U_RFIR01VldPar("' + AllTrim(GetMv("ES_FUNXML",,"RFATR01XML")) + '")',;
				.F. })

ParamBox(aPergs, cTitulo, @aRet,,,,,,,FunName()+"1", .T., .T.)

RestArea(aAreaAtu)

aSize(aPergs, 0)
aSize(aAreaAtu, 0)

Return aRet

/*/{Protheus.doc} GrvHistSE1
	(Atualiza historico e numero do banco - E1_NUMBCO - nosso numero - no titulo)
	@type Static Function
	@author Calabro'
	@since 22/03/2022
	@version version
	@param param, param_type, param_descr
	@return return, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function GrvHistSE1(aCB_RN_NN as array, cNroDoc as character)

DbSelectArea("SE1")
RecLock("SE1", .F.)

	If SEA->EA_PORTADO == "001"

		SE1->E1_NUMBCO	:=	aCB_RN_NN[3]   // Nosso número (Ver fórmula para calculo)
		SE1->E1_HIST	:= "BOLETO BB GERADO"
	ElseIf SEA->EA_PORTADO == "341"

		SE1->E1_NUMBCO	:= Substr(aCB_RN_NN[3],1,8)   // Nosso número
		SE1->E1_HIST	:= "BOLETO ITAU GERADO"
		// nTotItau++	//Total de títulos passados ao portador Itaú
	ElseIf SEA->EA_PORTADO == "237"
		
		SE1->E1_NUMBCO 	:= Substr(cNroDoc,1,12)
		SE1->E1_HIST 	:= "BOLETO BRADESCO GERADO"
	ElseIf SEA->EA_PORTADO == "422"

		SE1->E1_NUMBCO 	:= Left(aCB_RN_NN[3],8)
		SE1->E1_HIST 	:= "BOLETO SAFRA GERADO"
	ElseIf SEA->EA_PORTADO == "637"

		SE1->E1_NUMBCO 	:= aCB_RN_NN[3]
		SE1->E1_HIST 	:= "BOLETO SOFISA GERADO"
	ElseIf SEA->EA_PORTADO == "033"

		SE1->E1_NUMBCO 	:= aCB_RN_NN[3]
		SE1->E1_HIST 	:= "BOLETO SANTANDER GERADO"
	EndIf

SE1->(MsUnlock())

Return Nil

/*/{Protheus.doc} RFIR01VldPar
	(Verifica se a funcao enviada por parametro esta' disponivel no repositorio)
	@type User Function
	@author Calabro'
	@since 22/03/2022
	@version version
	@param cRotina, character, (Nome da rotina a ser verificada)
	@return lRet, logical, (.T. - rotina disponivel no repositorio, .F. - rotina nao disponivel)
	@example
	(examples)
	@see (links_or_references)
	/*/

User Function RFIR01VldPar(cRotina as character)

Local lRet		:= FindFunction(cRotina) as logical

If !lRet
	Aviso( "Rotina não disponível", "Essa rotina não encontra-se disponível para utilização" + CRLF +;
			"Por favor, entre em contato com o administrador e solicite mais informações para contratação " +;
			"e disponibilização deste recurso", {"&Cancelar"} )
EndIf

Return lRet

/*/{Protheus.doc} GetSubConta
	(Busca o codigo da subconta dos dados bancarios que sao usados para gerar arquivo CNAB com o banco)
	@type Static Function
	@author Calabro'
	@since 22/03/2022
	@version version
	@param cCodBanco, character, (Codigo do banco)
	@param cNumAgenc, character, (Numero da agencia)
	@param cNumConta, character, (Numero da conta)
	@return return, return_type, return_description
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function GetSubConta(cCodBanco as character, cNumAgenc as character, cNumConta as character)

Local cQuery	:= "" as character
Local cAlias	:= GetNextAlias() as character
Local cSubConta	:= "" as character

cQuery := " SELECT R_E_C_N_O_ SEERECNO" + CRLF
cQuery += "   FROM " + RetSQLTab("SEE") + CRLF
cQuery += "  WHERE SEE.EE_FILIAL = '" + xFilial("SEE") + "' " + CRLF
cQuery += "    AND SEE.EE_CODIGO = '" + cCodBanco + "' " + CRLF
cQuery += "    AND SEE.EE_AGENCIA = '" + cNumAgenc + "' " + CRLF
cQuery += "    AND SEE.EE_CONTA = '" + cNumConta + "' " + CRLF
cQuery += "    AND SEE.EE_CODEMP <> ' ' " + CRLF
cQuery += "    AND SEE.D_E_L_E_T_ <> '*' " + CRLF

MpSysOpenQuery(cQuery, cAlias)

If (cAlias)->(!EOF())
	DbSelectArea("SEE")
	SEE->(DbGoTo((cAlias)->SEERECNO))
	cSubConta := SEE->(If(!Empty(EE_SUBCTA), EE_SUBCTA, Space(TamSX3("EE_SUBCTA")[1])))
EndIf

Return cSubConta

/*/{Protheus.doc} GetDVBanco
	(Funcao para buscar o digito verificador do banco a partir de um array)
	@type Static Function
	@author Calabro'
	@since 24/03/2022
	@version version
	@param cCodBanco, character, (Codigo do banco a ser procurado)
	@return aDadosBco, array, (Array contendo os dados do banco encontrado)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function GetDVBanco(cCodBanco)

Local nPos			:= 0 as numeric

Local aBancos		:= {} as array

// Carrega lista de bancos com seus DV
// Dados extraidos de http://www.eurodidattica.com/html/bancos.htm

// Estrutura de aBancos:
// [1] - Codigo do banco
// [2] - DV do banco
// [3] - Nome do banco
AAdd(aBancos, {"654",	"8",	"Banco A.J.Renner S.A."})
AAdd(aBancos, {"M40",	"0",	"Banco ABB S.A."})
AAdd(aBancos, {"246",	"1",	"Banco ABC Brasil S.A."})
AAdd(aBancos, {"356",	"5",	"Banco ABN AMRO Real S.A."})
AAdd(aBancos, {"222",	"4",	"Banco AGF Braseg S.A."})
AAdd(aBancos, {"298",	" ",	"Banco Alfa S.A."})
AAdd(aBancos, {"215",	"1",	"Banco América do Sul S.A."})
AAdd(aBancos, {"M34",	"0",	"Banco American Express S.A."})
AAdd(aBancos, {"625",	"4",	"Banco Araucária S.A."})
AAdd(aBancos, {"213",	"5",	"Banco Arbi S.A."})
AAdd(aBancos, {"230",	"5",	"Banco Bandeirantes S.A."})
AAdd(aBancos, {"028",	"0",	"Banco Baneb S.A."})
AAdd(aBancos, {"029",	"9",	"Banco Banerj S.A."})
AAdd(aBancos, {"038",	"8",	"Banco Banestado S.A."})
AAdd(aBancos, {"719",	"6",	"Banco Banif Primus S.A."})
AAdd(aBancos, {"740",	"4",	"Banco Barclays e Galícia S.A."})
AAdd(aBancos, {"184",	"8",	"Banco BBA - CREDITANSTALT S.A."})
AAdd(aBancos, {"107",	"4",	"Banco BBM S.A."})
AAdd(aBancos, {"048",	"5",	"Banco Bemge S.A."})
AAdd(aBancos, {"739",	"0",	"Banco BGN S.A."})
AAdd(aBancos, {"641",	"6",	"Banco Bilbao Vizcaya Argentaria Brasil S.A."})
AAdd(aBancos, {"496",	"0",	"Banco Bilbao Vizcaya Argentaria S.A."})
AAdd(aBancos, {"394",	"8",	"Banco BMC S.A."})
AAdd(aBancos, {"318",	"2",	"Banco BMG S.A."})
AAdd(aBancos, {"116",	"3",	"Banco BNL do Brasil S.A."})
AAdd(aBancos, {"752",	"8",	"Banco BNP Paribas Brasil S.A."})
AAdd(aBancos, {"231",	"1",	"Banco Boavista Interatlântico S.A."})
AAdd(aBancos, {"218",	"6",	"Banco Bonsucesso S.A."})
AAdd(aBancos, {"262",	"3",	"Banco Boreal S.A."})
AAdd(aBancos, {"237",	"2",	"Banco Bradesco S.A."})
AAdd(aBancos, {"225",	"9",	"Banco Brascan S.A."})
AAdd(aBancos, {"M17",	"8",	"Banco BRJ S.A."})
AAdd(aBancos, {"M10",	"1",	"Banco BVA S.A."})
AAdd(aBancos, {"263",	"1",	"Banco Cacique S.A."})
AAdd(aBancos, {"412",	"X",	"Banco Capital S.A."})
AAdd(aBancos, {"40",	" ",	"Banco Cargill S.A."})
AAdd(aBancos, {"266",	"6",	"Banco Cédula S.A."})
AAdd(aBancos, {"221",	"6",	"Banco Chase Fleming S.A."})
AAdd(aBancos, {"376",	"X",	"Banco Chase Manhattan S.A."})
AAdd(aBancos, {"244",	"5",	"Banco Cidade S.A."})
AAdd(aBancos, {"745",	"5",	"Banco Citibank S.A."})
AAdd(aBancos, {"241",	"0",	"Banco Clássico S.A."})
AAdd(aBancos, {"M36",	"0",	"Banco CNH Capital S.A."})
AAdd(aBancos, {"753",	"6",	"Banco Comercial Uruguai S.A."})
AAdd(aBancos, {"756",	"0",	"Banco Cooperativo do Brasil S.A. - BANCOOB"})
AAdd(aBancos, {"748",	"X",	"Banco Cooperativo Sicredi S.A. - BANSICREDI"})
AAdd(aBancos, {"109",	"0",	"Banco Credibanco S.A."})
AAdd(aBancos, {"721",	"8",	"Banco Credibel S.A."})
AAdd(aBancos, {"505",	"3",	"Banco Credit Suisse First Boston Garantia S.A."})
AAdd(aBancos, {"229",	"1",	"Banco Cruzeiro do Sul S.A."})
AAdd(aBancos, {"003",	"5",	"Banco da Amazônia S.A."})
AAdd(aBancos, {"M38",	"0",	"Banco Daimlerchrysler S.A."})
AAdd(aBancos, {"733",	"1",	"Banco das Nações S.A."})
AAdd(aBancos, {"707",	"2",	"Banco Daycoval S.A."})
AAdd(aBancos, {"291",	"7",	"Banco de Crédito Nacional S.A."})
AAdd(aBancos, {"022",	"1",	"Banco de Crédito Real de Minas Gerais S.A."})
AAdd(aBancos, {"300",	"X",	"Banco de La Nacion Argentina"})
AAdd(aBancos, {"495",	"2",	"Banco de La Provincia de Buenos Aires"})
AAdd(aBancos, {"494",	"4",	"Banco de La Republica Oriental del Uruguay"})
AAdd(aBancos, {"024",	"8",	"Banco de Pernambuco S.A. - BANDEPE"})
AAdd(aBancos, {"456",	"1",	"Banco de Tokyo-Mitsubishi Brasil S.A."})
AAdd(aBancos, {"214",	"3",	"Banco Dibens S.A."})
AAdd(aBancos, {"001",	"9",	"Banco do Brasil S.A."})
AAdd(aBancos, {"031",	"0",	"Banco do Estado de Goiás S.A. - BEG"})
AAdd(aBancos, {"027",	"2",	"Banco do Estado de Santa Catarina S.A."})
AAdd(aBancos, {"033",	"4",	"Banco do Estado de São Paulo S.A. - Banespa"})
AAdd(aBancos, {"047",	"7",	"Banco do Estado de Sergipe S.A."})
AAdd(aBancos, {"034",	"5",	"Banco do Estado do Amazonas S.A."})
AAdd(aBancos, {"035",	"3",	"Banco do Estado do Ceará S.A."})
AAdd(aBancos, {"036",	"1",	"Banco do Estado do Maranhão S.A."})
AAdd(aBancos, {"037",	"0",	"Banco do Estado do Pará S.A."})
AAdd(aBancos, {"039",	"6",	"Banco do Estado do Piauí S.A."})
AAdd(aBancos, {"041",	"8",	"Banco do Estado do Rio Grande do Sul S.A."})
AAdd(aBancos, {"004",	"3",	"Banco do Nordeste do Brasil S.A."})
AAdd(aBancos, {"743",	"9",	"Banco Emblema S.A."})
AAdd(aBancos, {"242",	"9",	"Banco Euroinvest S.A. - Eurobanco"})
AAdd(aBancos, {"370",	"0",	"Banco Europeu para a America Latina (BEAL) S.A."})
AAdd(aBancos, {"265",	"8",	"Banco Fator S.A."})
AAdd(aBancos, {"M22",	"4",	"Banco Fiat S.A."})
AAdd(aBancos, {"224",	"0",	"Banco Fibra S.A."})
AAdd(aBancos, {"200",	"3",	"Banco Ficrisa Axelrud S.A."})
AAdd(aBancos, {"626",	"2",	"Banco Ficsa S.A."})
AAdd(aBancos, {"473",	"1",	"Banco Financial Português S.A."})
AAdd(aBancos, {"725",	"0",	"Banco Finansinos S.A."})
AAdd(aBancos, {"252",	"6",	"Banco Fininvest S.A."})
AAdd(aBancos, {"M35",	"0",	"Banco Ford S.A."})
AAdd(aBancos, {"346",	"8",	"Banco Francês e Brasileiro S.A."})
AAdd(aBancos, {"489",	"6",	"Banco Francês Internacional (Brasil) S.A."})
AAdd(aBancos, {"233",	"X",	"Banco GE Capital S.A."})
AAdd(aBancos, {"624",	"7",	"Banco General Motors S.A."})
AAdd(aBancos, {"734",	"X",	"Banco Gerdau S.A."})
AAdd(aBancos, {"612",	"2",	"Banco Guanabara S.A."})
AAdd(aBancos, {"M41",	"0",	"Banco Honda S.A."})
AAdd(aBancos, {"228",	"3",	"Banco Icatu S.A."})
AAdd(aBancos, {"258",	"5",	"Banco Induscred S.A."})
AAdd(aBancos, {"604",	"1",	"Banco Industrial do Brasil S.A."})
AAdd(aBancos, {"320",	"4",	"Banco Industrial e Comercial S.A."})
AAdd(aBancos, {"653",	"X",	"Banco Indusval S.A."})
AAdd(aBancos, {"204",	"6",	"Banco Inter American Express S.A."})
AAdd(aBancos, {"630",	"0",	"Banco Intercap S.A."})
AAdd(aBancos, {"722",	"6",	"Banco Interior de São Paulo S.A."})
AAdd(aBancos, {"232",	"1",	"Banco Interpart S.A."})
AAdd(aBancos, {"249",	"6",	"Banco Investcred S.A."})
AAdd(aBancos, {"341",	"7",	"Banco Itaú S.A."})
AAdd(aBancos, {"42",	" ",	"Banco J. Safra S.A."})
AAdd(aBancos, {"M11",	"2",	"Banco J.P.Morgan S.A."})
AAdd(aBancos, {"217",	"8",	"Banco John Deere S.A."})
AAdd(aBancos, {"757",	"9",	"Banco KEB do Brasil S.A."})
AAdd(aBancos, {"M09",	"9",	"Banco Lloyds TSB S.A."})
AAdd(aBancos, {"600",	"9",	"Banco Luso Brasileiro S.A."})
AAdd(aBancos, {"212",	"7",	"Banco Matone S.A."})
AAdd(aBancos, {"720",	"X",	"Banco Maxinvest S.A."})
AAdd(aBancos, {"392",	"1",	"Banco Mercantil de São Paulo S.A."})
AAdd(aBancos, {"389",	"1",	"Banco Mercantil do Brasil S.A."})
AAdd(aBancos, {"755",	"2",	"Banco Merrill Lynch S.A."})
AAdd(aBancos, {"746",	"3",	"Banco Modal S.A."})
AAdd(aBancos, {"738",	"2",	"Banco Morada S.A."})
AAdd(aBancos, {"243",	"7",	"Banco Multi Stock S.A."})
AAdd(aBancos, {"151",	"1",	"Banco Nossa Caixa S.A."})
AAdd(aBancos, {"M04",	"4",	"Banco OK de Investimento S.A."})
AAdd(aBancos, {"M01",	"1",	"Banco Opportunity S.A."})
AAdd(aBancos, {"M19",	"1",	"Banco Ourinvest S.A."})
AAdd(aBancos, {"208",	"9",	"Banco Pactual S.A."})
AAdd(aBancos, {"623",	"8",	"Banco Panamericano S.A."})
AAdd(aBancos, {"611",	"4",	"Banco Paulista S.A."})
AAdd(aBancos, {"650",	"5",	"Banco Pebb S.A."})
AAdd(aBancos, {"613",	"0",	"Banco Pecúnia S.A."})
AAdd(aBancos, {"643",	"2",	"Banco Pine S.A."})
AAdd(aBancos, {"658",	"0",	"Banco Porto Real S.A."})
AAdd(aBancos, {"735",	"8",	"Banco Pottencial S.A."})
AAdd(aBancos, {"638",	"6",	"Banco Prosper S.A."})
AAdd(aBancos, {"M39",	"0",	"Banco PSA Finance Brasil S.A."})
AAdd(aBancos, {"747",	"1",	"Banco Rabobank International Brasil S.A."})
AAdd(aBancos, {"M18",	"9",	"Banco Rede S.A."})
AAdd(aBancos, {"216",	"X",	"Banco Regional Malcon S.A. Com.e de Cred.ao Cons."})
AAdd(aBancos, {"633",	"5",	"Banco Rendimento S.A."})
AAdd(aBancos, {"741",	"2",	"Banco Ribeirão Preto S.A."})
AAdd(aBancos, {"453",	"7",	"Banco Rural S.A."})
AAdd(aBancos, {"422",	"7",	"Banco Safra S.A."})
AAdd(aBancos, {"353",	"0",	"Banco Santander Brasil S.A."})
AAdd(aBancos, {"498",	"7",	"Banco Santander Central Hispano S.A."})
AAdd(aBancos, {"502",	"9",	"Banco Santander de Negócios S.A."})
AAdd(aBancos, {"008",	"6",	"Banco Santander Meridional S.A."})
AAdd(aBancos, {"351",	"4",	"Banco Santander S.A."})
AAdd(aBancos, {"607",	"6",	"Banco Santos Neves S.A."})
AAdd(aBancos, {"702",	"1",	"Banco Santos S.A."})
AAdd(aBancos, {"250",	"6",	"Banco Schahin S.A."})
AAdd(aBancos, {"211",	"9",	"Banco Sistema S.A."})
AAdd(aBancos, {"637",	"8",	"Banco Sofisa S.A."})
AAdd(aBancos, {"366",	"2",	"Banco Sogeral S.A."})
AAdd(aBancos, {"M07",	"7",	"Banco Sterling S.A."})
AAdd(aBancos, {"347",	"6",	"Banco Sudameris Brasil S.A."})
AAdd(aBancos, {"205",	"4",	"Banco Sul América S.A."})
AAdd(aBancos, {"464",	"2",	"Banco Sumitomo Brasileiro S.A."})
AAdd(aBancos, {"618",	"1",	"Banco Tendência S.A."})
AAdd(aBancos, {"737",	"4",	"Banco Theca S.A."})
AAdd(aBancos, {"M37",	"0",	"Banco Toyota do Brasil S.A."})
AAdd(aBancos, {"634",	"3",	"Banco Triângulo S.A."})
AAdd(aBancos, {"M27",	"9",	"Banco Tricury S.A."})
AAdd(aBancos, {"247",	"X",	"Banco UBS Warburg S.A."})
AAdd(aBancos, {"493",	"6",	"Banco Union - Brasil S.A."})
AAdd(aBancos, {"M33",	"6",	"Banco Volkswagen S.A."})
AAdd(aBancos, {"M03",	"3",	"Banco Volvo (Brasil) S.A."})
AAdd(aBancos, {"655",	"6",	"Banco Votorantim S.A."})
AAdd(aBancos, {"610",	"6",	"Banco VR S.A."})
AAdd(aBancos, {"480",	"4",	"Banco Wachovia S.A."})
AAdd(aBancos, {"219",	"4",	"Banco Zogbi S.A."})
AAdd(aBancos, {"62",	" ",	"Banco1.Net S.A."})
AAdd(aBancos, {"021",	"3",	"BANESTES S.A. Banco do Estado do Espírito Santo"})
AAdd(aBancos, {"235",	"6",	"Bank of America - Liberal S.A. (Banco Múltiplo)"})
AAdd(aBancos, {"479",	"0",	"BankBoston Banco Múltiplo S.A."})
AAdd(aBancos, {"744",	"7",	"BankBoston N.A."})
AAdd(aBancos, {"294",	"1",	"BCR Banco de Crédito Real S.A."})
AAdd(aBancos, {"749",	"8",	"BR Banco Mercantil S.A."})
AAdd(aBancos, {"070",	"1",	"BRB - Banco de Brasília S.A."})
AAdd(aBancos, {"104",	"0",	"Caixa Econômica Federal"})
AAdd(aBancos, {"477",	"4",	"Citibank N.A."})
AAdd(aBancos, {"175",	"9",	"Continental Banco S.A."})
AAdd(aBancos, {"487",	"1",	"Deutsche Bank S.A. - Banco Alemão"})
AAdd(aBancos, {"751",	"X",	"Dresdner Bank Brasil S.A. - Banco Múltiplo"})
AAdd(aBancos, {"210",	"0",	"Dresdner Bank Lateinamerika AG"})
AAdd(aBancos, {"399",	"9",	"HSBC Bank Brasil S.A. - Banco Múltiplo"})
AAdd(aBancos, {"168",	"6",	"HSBC Investment Bank Brasil S.A. - Banco Múltiplo"})
AAdd(aBancos, {"750",	"1",	"HSBC Republic Bank Brasil S.A - Banco Múltiplo"})
AAdd(aBancos, {"63",	" ",	"Ibibank S.A. - Banco Múltiplo"})
AAdd(aBancos, {"492",	"8",	"ING Bank N.V."})
AAdd(aBancos, {"472",	"3",	"Lloyds TSB Bank PLC."})
AAdd(aBancos, {"488",	"X",	"Morgan Guaranty Trust Company of New York"})
AAdd(aBancos, {"148",	"1",	"Multi Banco S.A."})
AAdd(aBancos, {"030",	"2",	"PARAIBAN - Banco do Estado da Paraíba S.A."})
AAdd(aBancos, {"254",	"2",	"Paraná Banco S.A."})
AAdd(aBancos, {"409",	"0",	"UNIBANCO - União de Bancos Brasileiros S.A."})

nPos := aScan(aBancos, {|x| x[1] == cCodBanco})

Return If(!Empty(nPos), aBancos[nPos], Array(3))

/*/{Protheus.doc} MontaHtml
	(Funcao para montar o HTML a ser considerado no e-mail)
	@type Static Function
	@author Calabro'
	@since 16/01/2022
	@version version
	@return cHtml, character, (Conteudo Html gerado)
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function MontaHtml()

Local cHtml		:= "" as character
Local cChaveNfe	:= If(!Empty(SF2->F2_CHVNFE), SF2->F2_CHVNFE, If(!Empty(SF2->F2_NFELETR), SF2->F2_NFELETR,"")) as character

// Texto em Html que ira no corpo do E-mail
// Boleto + Nota Fiscal
cHtml += "<html>"
cHtml += "	<head>"
cHtml += "		<title>Email_Notificacao</title>"
cHtml += "	</head>"
cHtml += "	<body>"
cHtml += "		<table border = '0' width='100%'>"
cHtml += "		<tr>"
cHtml += "			<td>"
cHtml += "				<font face='Arial' size='2' color='Black'>"

cHtml += "Aten&ccedil;&atilde;o: Ref. aos documentos e Link de Nota Fiscal Nº "+ AllTrim(SF2->F2_DOC) + " - " + AllTrim(SF2->F2_SERIE)

// Se Envia Boleto com link da Nota
If !Vazio(cChaveNfe)
	cHtml += "				</font>"
	cHtml += "				<br><br>"
	cHtml += "				<font face='Arial' size='2' color='Black'>"
	If !Empty(SF2->F2_NFELETR)
		cHtml += "					Link de Consulta NFe: <a href='"+cChaveNfe+"' title='Consulta Nota Fiscal Eletronica'>Consulta NFe</a>"
	Else
		cHtml += "					Link de Consulta NFe: <a href='https://dfe-portal.svrs.rs.gov.br/Nfe/Consulta' title='Consulta Nota Fiscal Eletronica'>Consulta NFe</a>"
	EndIf
	cHtml += "				</font>"
	cHtml += "				<br><br>"
	cHtml += "				<font face='Arial' size='2' color='Black'>"
	cHtml += "					Chave de acesso da NFe: "+cChaveNfe+" "
	cHtml += "				</font>"
EndIf

cHtml += "				<br><br>"
cHtml += "				<font face='Arial' size='2' color='Black'>"
cHtml += "					D&uacute;vidas, favor entrar em contato atrav&eacute;s do telefone: (011) ####-#### ou no e-mail teste@" + Lower(AllTrim(SM0->M0_NOME)) + ".com.br."
cHtml += "				</font>"
cHtml += "				<br></br>"
cHtml += "				<font face='Arial' size='2' color='Black'>"
cHtml += "					<b>Setor de Cr&eacute;dito e Cobran&ccedil;a</b>"
cHtml += "				</font>"
cHtml += "				<br></br>"
cHtml += "				<font face='Arial' size='2' color='Black'>"
cHtml += 					FWFilName(cEmpAnt, cFilAnt)
cHtml += "				</font>"
cHtml += "				<br></br>"
// cHtml += "				<font face='Arial' size='2' color='Black'>"
// cHtml += "					<b>Este e-mail de boleto substitui o boleto físico.</b>"
// cHtml += "				</font>"
cHtml += "			</td>"
cHtml += "		</tr>"
cHtml += "		</table>"
cHtml += "	</body>"
cHtml += "</html>"

Return cHtml

/*/{Protheus.doc} BuscaHTML
	(Funcao para buscar modelo HTML da filial posicionada)
	@type Static Function
	@author Calabro'
	@since 22/01/2022
	@version version
	@param cLayHTML, character, (Caminho no servidor que encontra-se o arquivo HTML)
	@return cConteudo, character, (Conteudo HTML retornado)
	@example
	(examples)
	@see (links_or_references)
	/*/
Static Function BuscaHTML(cLayHTML as character)

Local cConteudo		:= "" as character

// Verifica se arquivo existe na pasta
If File(cLayHTML)
	// Faz a leitura do conteudo do arquivo
	cConteudo := MemoRead(cLayHTML)
EndIf

Return cConteudo
