#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"  
#INCLUDE "TBICONN.CH"
#INCLUDE "RPTDEF.CH"

#DEFINE NLINDMSFOL	2290	// Maximo de linhas nas demais folhas

/*/{Protheus.doc} RFATR01
	(Rotina para gerar relatorio customizado de Orçamento de Vendas analítico)
	@type User Function
	@author Everaldo
	@since 10/11/2021
	@version 1.0
	@return Nil, Nulo
	@example
	(examples)
	@see (links_or_references)
/*/

User Function RFATR01()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Declaracao de variaveis                                             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Local lCanSave	 	:= .T.
Local lUserSave  	:= .T.
Local lCentered		:= .T.
Local aRet 			:= {}
Local aParamBox 	:= {}
Local cLoad		 	:= "getRfatr01"
Local axMoeda		:= {"Moeda 1","Moeda 2","Moeda 3","Moeda 4","Moeda 5"}
Local axSituacao	:= {"Todos","Aberto","Baixado","Cancelado"}
Local aAreas		:= {SCJ->(GetArea()), GetArea()} as array
Private cCadastro  	:= "Orçamento de Vendas"
Private lEnd		:= .F.
Private nLastKey 	:= 0
Private lTela 		:= .T. as logical

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica as Perguntas Seleciondas                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Parametros do relatorio                                             ³
//³                                                                     ³
//³ mv_par02 - Cliente De                                               ³
//³ mv_par03 - Cliente Até                                              ³
//³ mv_par04 - Data De                                                  ³
//³ mv_par05 - Data Até                                                 ³
//³ mv_par06 - Orçamento De                                             ³
//³ mv_par07 - Orçamento Até                                            ³
//³ mv_par08 - Situação                                                 ³
//³ mv_par09 - Qual Moeda                                               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
// Monta array com as perguntas

aAdd(aParamBox, {9,cCadastro,100,12,.T.})
aAdd(aParamBox, {1,"Cliente de ?",Space(06),"","","SA1","",0,.F.}) // Tipo caractere
aAdd(aParamBox, {1,"Cliente até ?",Space(06),"","","SA1","",0,.F.}) // Tipo caractere
aAdd(aParamBox, {1,"Data de ?",Ctod(Space(8)),"","","","",50,.F.}) // Tipo data
aAdd(aParamBox, {1,"Data até ?",Ctod(Space(8)),"","","","",50,.F.}) // Tipo data
aAdd(aParamBox, {1,"Orçamento de ?",Space(06),"","","SCJ","",0,.F.}) // Tipo caractere
aAdd(aParamBox, {1,"Orçamento até ?",Space(06),"","","SCJ","",0,.F.}) // Tipo caractere
aAdd(aParamBox, {2,"Situação ?",1,axSituacao,50,"",.F.}) // Tipo combo
aAdd(aParamBox, {2,"Qual moeda ? ",1,axMoeda,50,"",.F.}) // Tipo combo

If IsInCallStack( "MATA415" )
	lTela := .F.
	mv_par06 := SCJ->CJ_NUM
	mv_par07 := SCJ->CJ_NUM
	mv_par08 := 1
	mv_par09 := 1
Else

	If !ParamBox(aParamBox, "Parâmetros", @aRet, /*bVldParams*/, , lCentered, , , , cLoad, lCanSave, lUserSave)
		Return
	EndIf

EndIf

Processa({|lEnd| RunProc()},cCadastro)

aEval(aAreas, {|x| RestArea(x) })

Return Nil

/*/{Protheus.doc} RunProc
	(Funcao para gerar relatorio de customizado de Orçamento de Vendas)
	@type User Function
	@author Everaldo
	@since 10/11/2021
	@version 1.0
	@param cDiretorio, character, (Diretorio a ser considerado para gravar o arquivo)
	@param cArquivo, character, (Nome do arquivo a ser considerado)
	@return Nil, Nulo
	@example
	(examples)
	@see (links_or_references)
/*/

Static Function RunProc()

Local nFolha		:= 0 as numeric
Local nLinha		:= 0 as numeric
Local cOrcAtu		:= "" as character
Local cFile			:= "" as character

Local lPrimFolha	:= .T. as logical
Local cRLF    		:= Chr(13)+Chr(10) as character

Local aAreas		:= {SCK->(GetArea()), GetArea()} as array

Private nPaginas    := 0 as numeric
Private nTotPaginas	:= 0 as numeric
Private nTotVal  	:= 0 as numeric
Private nTotDesc 	:= 0 as numeric
Private nTotValDesc	:= 0 as numeric
Private oRpt		:= Nil as object
Private oFont12		:= Nil as object
Private oFont12N	:= Nil as object
Private oFont14		:= Nil as object
Private oFont14N	:= Nil as object
Private oFont16N	:= Nil as object
Private oFont18N	:= Nil as object

// Monta a query de clientes 

cQuery := "SELECT "
cQuery += "CJ_FILIAL, CJ_CLIENTE, CJ_LOJA, CJ_EMISSAO, CJ_NUM, CJ_STATUS, CJ_MOEDA, CJ_VALIDA, " +cRLF
cQuery += "CJ_TPFRETE, CJ_TIPOCLI,  " +cRLF
cQuery += "CK_FILIAL, CK_NUM, CK_PRODUTO, CK_ITEM, CK_CLIENTE, CK_LOJA, CK_UM, CK_QTDVEN, CK_PRCVEN, " +cRLF
cQuery += "CK_VALOR, CK_TES, CK_VALDESC, CK_ENTREG, CK_CLASFIS, " +cRLF
cQuery += "A1_COD, SUBSTRING(A1_NOME,1,35) AS A1_NOME, SUBSTRING(A1_END,1,35) AS A1_END, A1_CEP, " +cRLF
cQuery += "A1_EST, A1_BAIRRO, A1_MUN, A1_CGC, A1_INSCR, A1_TEL, " +cRLF
cQuery += "SUBSTRING(B1_DESC,1,30) AS B1_DESC, " +cRLF
cQuery += "A3_NOME " +cRLF

cQuery += "FROM "+RetSqlName("SCJ")+" SCJ " +cRLF

cQuery += "INNER JOIN "+RetSqlName("SCK")+" SCK "+cRLF
cQuery += "ON SCJ.CJ_FILIAL = SCK.CK_FILIAL "+cRLF
cQuery += "AND SCJ.CJ_NUM = SCK.CK_NUM " +cRLF
cQuery += "AND SCJ.CJ_CLIENTE = SCK.CK_CLIENTE " +cRLF
cQuery += "AND SCJ.CJ_LOJA = SCK.CK_LOJA " +cRLF
cQuery += "AND SCK.D_E_L_E_T_ <> '*' " +cRLF

cQuery += "INNER JOIN "+RetSqlName("SA1")+" SA1 "+cRLF
cQuery += "ON SA1.A1_FILIAL = '"+xFilial("SA1")+"' " +cRLF
cQuery += "AND SA1.A1_COD = SCJ.CJ_CLIENTE " +cRLF
cQuery += "AND SA1.A1_LOJA = SCJ.CJ_LOJA " +cRLF
cQuery += "AND SA1.D_E_L_E_T_ <> '*' " +cRLF

cQuery += "INNER JOIN "+RetSqlName("SB1")+" SB1 "+cRLF
cQuery += "ON SB1.B1_FILIAL = '"+xFilial("SB1")+"' " +cRLF
cQuery += "AND SB1.B1_COD = SCK.CK_PRODUTO " +cRLF
cQuery += "AND SB1.D_E_L_E_T_ <> '*' " +cRLF

cQuery += "LEFT OUTER JOIN "+RetSqlName("SA3")+" SA3 "+cRLF
cQuery += "ON SA3.A3_FILIAL = '"+xFilial("SA3")+"' " +cRLF
cQuery += "AND SA3.A3_COD = SA1.A1_VEND " +cRLF
cQuery += "AND SA3.D_E_L_E_T_ <> '*' " +cRLF

cQuery += "WHERE SCJ.CJ_FILIAL = '"+xFilial("SCJ")+"' " +cRLF

If lTela
	cQuery += "AND SCJ.CJ_CLIENTE BETWEEN '"+mv_par02+"' AND '"+mv_par03+"' " +cRLF
	cQuery += "AND SCJ.CJ_EMISSAO BETWEEN '"+Dtos(mv_par04)+"' AND '"+Dtos(mv_par05)+"' " +cRLF
EndIf

cQuery += "AND SCJ.CJ_NUM BETWEEN '"+mv_par06+"' AND '"+mv_par07+"' " +cRLF      

If mv_par08 == 2
	cQuery += "AND SCJ.CJ_STATUS = 'A' " +cRLF
ElseIf mv_par08 == 3
	cQuery += "AND SCJ.CJ_STATUS = 'B' " +cRLF
ElseIf mv_par08 == 4
	cQuery += "AND SCJ.CJ_STATUS = 'C' " +cRLF
EndIf

cQuery += "AND SCJ.D_E_L_E_T_ <> '*' " +cRLF

cQuery += "ORDER BY SCJ.CJ_FILIAL, SCJ.CJ_CLIENTE, SCJ.CJ_LOJA, SCJ.CJ_NUM, SCK.CK_ITEM " +cRLF

cQuery := ChangeQuery(cQuery)

MemoWrite("\QUERYSYS\RFATR01.SQL",cQuery)

// Define os registros a processar
If Select("TMP001") > 0
	dbSelectArea("TMP001")
	dbCloseArea()
EndIf

TCQUERY cQuery NEW ALIAS "TMP001"

dbSelectArea("TMP001")
dbGoTop()

// Acumula array com os dados para exportação
While !Eof() .And. !lEnd

	// Verifica se abortou a rotina
	If lEnd
		@ Li,000 PSAY "Abortado pelo operador"
		Return (Nil)
	EndIf

	// Quando quebra a numeração da carga é inicializada uma nova página com todas as secoes

	If cOrcAtu <> TMP001->CJ_NUM .Or. nLinha > NLINDMSFOL

		cOrcAtu := TMP001->CJ_NUM

		// Calcula impostos
		CalcImposto()

		// Definições realizadas somente na primeira folha
		// Senão imprime total do Orçamento
		If lPrimFolha

			lPrimFolha := .F.
			cFile := "RFATR01_"+AllTrim(TMP001->CJ_NUM) + ".PDF"
			//      FWMsPrinter():New ( < cFilePrintert >, [ nDevice], [ lAdjustToLegacy], [ cPathInServer], [ lDisabeSetup ], [ lTReport], [ @oPrintSetup], [ cPrinter], [ lServer], [ lPDFAsPNG], [ lRaw], [ lViewPDF], [ nQtdCopy] )
			oRpt := FWMSPrinter():New(AllTrim(cFile),IMP_PDF/*nDevice*/,/*lAdjustToLegacy*/, "C:\PDF\"/*cPathInServer*/,!lTela/*lDisableSetup*/ ,/*lTReport*/,/*oPrintSetup*/,/*cPrinter*/,/*lServer*/,/*lPDFAsPNG*/,/*lRaw*/,.F./*lViewPDF*/)
			oRpt:cPathPDF := "C:\PDF\"
			oRpt:SetPortrait()

			oFont12		:= TFontEx():New(oRpt,"Arial",12,12,.F.,.T.,.F.)
			oFont12N	:= TFontEx():New(oRpt,"Arial",12,12,.T.,.T.,.F.)
			oFont14		:= TFontEx():New(oRpt,"Arial",14,14,.F.,.T.,.F.)
			oFont14N	:= TFontEx():New(oRpt,"Arial",14,14,.T.,.T.,.F.)
			oFont16N	:= TFontEx():New(oRpt,"Arial",16,16,.T.,.T.,.F.)
			oFont18N	:= TFontEx():New(oRpt,"Arial",18,18,.T.,.T.,.F.)
		Else

			// Rodape do relatorio
			If nLinha <= NLINDMSFOL
	
				// Secao totais 
				AdicTotal(@nLinha)

			EndIf

			// Encerro pagina atual
			oRpt:EndPage()

			// Fecho o cálculo de impostos
			MaFisEnd()
		EndIf

		nLinha := 0
		nFolha++

		// Inicio nova pagina
		oRpt:StartPage()

		// Desenho linhas laterais da folha
		// SetLinhasPag()

		// Secao do cabecalho
		AdicCabecalho()

		// Secao do cliente
		AdicCliente()

		// Secao discriminacao dos itens
		AdicDiscrimItens()

	EndIf

	// Secao dos itens 
	AdicItens(@nLinha)


 	dbSelectArea("TMP001")
	dbSkip()
EndDo

// Encerra o relatório
If !lPrimFolha
	AdicTotal(@nLinha)
	oRpt:EndPage()
EndIf

// oRpt:Preview()
oRpt:Print()
FreeObj(oRpt)
oRpt := Nil

aEval(aAreas, {|x| RestArea(x) })

Return Nil

/*/{Protheus.doc} AdicCabecalho
	(Funcao para adicionar dados do Cabecalho)
	@type Static Function
	@author Everaldo
	@since 10/11/2021
	@version version
	@param 
	@return Nil, Nulo
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function AdicCabecalho()

nPaginas ++
oRpt:SayBitmap(205	, 100	, "\SYSTEM\IMAGENS\INTERMAC.JPEG"						, 350, 150)
oRpt:SayAlign(210	, 1900	, "Página " + Transform(nPaginas, "@R 99") + " de " + Transform(nTotPaginas, "@R 99")	, oFont12N:oFont	, 300, 100, /* CLR_HRED */	, 0, 0)
oRpt:SayAlign(240	, 050	, "Orçamento de Venda Analítico"						, oFont18N:oFont	, 2000, 100,, 2, 0)
oRpt:SayAlign(250	, 1900	, DtoC(dDataBase)      		 							, oFont12N:oFont	, 300, 100, /* CLR_HRED */	, 0, 0)

Return Nil

/*/{Protheus.doc} AdicCliente
	(Funcao para adicionar dados do Cliente)
	@type Static Function
	@author Everaldo
	@since 11/11/2021
	@version version
	@return Nil, Nulo
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function AdicCliente()

Local aTipFrete	:= {} as array
Local nX		:= 0 as numeric

AAdd(aTipFrete, {"C", "C-CIF"})
AAdd(aTipFrete, {"F", "F-FOB"})
AAdd(aTipFrete, {"T", "T-Por conta de terceiros"})
AAdd(aTipFrete, {"R", "R-Por conta remetente"})
AAdd(aTipFrete, {"D", "D-Por conta destinatário"})
AAdd(aTipFrete, {"S", "S-Sem frete"})

nX := AScan( aTipFrete,{|x| x[1] == TMP001->CJ_TPFRETE})

oRpt:Line(400	, 100	, 400	, 2080)		// Linha -- acima do cliente
oRpt:Line(403	, 100	, 403	, 2080)
oRpt:Line(405	, 100	, 405	, 2080)

oRpt:SayAlign(460	, 100	, AllTrim(SM0->M0_FILIAL)								, oFont12:oFont		, 500, 100,, 0, 0)
oRpt:SayAlign(460	, 500	, "Cliente: " 							 				, oFont12N:oFont	, 350, 100,, 0, 0)
oRpt:SayAlign(460	, 640	, AllTrim(TMP001->A1_NOME)		  		 				, oFont12:oFont		, 650, 100,, 0, 0)
oRpt:SayAlign(460	, 1300	, "Data de Emissão: " 							 		, oFont12N:oFont	, 350, 100,, 0, 0)
oRpt:SayAlign(460	, 1540	, DToC(SToD(TMP001->CJ_EMISSAO))	  		 			, oFont12:oFont		, 200, 100,, 0, 0)
oRpt:SayAlign(460	, 1690	, "N° do Orçamento: " 							 		, oFont12N:oFont	, 350, 100,, 0, 0)
oRpt:SayAlign(460	, 1940	, AllTrim(TMP001->CJ_NUM)		  			 			, oFont12:oFont		, 350, 100,, 0, 0)

oRpt:SayAlign(500	, 100	, AllTrim(SM0->M0_ENDENT)								, oFont12:oFont		, 500, 100,, 0, 0)
oRpt:SayAlign(500	, 500	, "Endereço: " 							 				, oFont12N:oFont	, 350, 100,, 0, 0)
oRpt:SayAlign(500	, 640	, AllTrim(TMP001->A1_END)		  		 				, oFont12:oFont		, 650, 100,, 0, 0)
oRpt:SayAlign(500	, 1300	, "Data de Entrega: " 							 		, oFont12N:oFont	, 350, 100,, 0, 0)
oRpt:SayAlign(500	, 1540	, DToC(SToD(TMP001->CK_ENTREG))		  		 			, oFont12:oFont		, 350, 100,, 0, 0)
oRpt:SayAlign(500	, 1690	, "Data de Validade: " 							 		, oFont12N:oFont	, 350, 100,, 0, 0)
oRpt:SayAlign(500	, 1940	, DToC(SToD(TMP001->CJ_VALIDA))		  		 			, oFont12:oFont		, 350, 100,, 0, 0)

oRpt:SayAlign(540	, 100	, AllTrim(SM0->M0_CIDENT)								, oFont12:oFont		, 500, 100,, 0, 0)
oRpt:SayAlign(540	, 500	, "Cidade:" 		  									, oFont12N:oFont	, 500, 100,, 0, 0)
oRpt:SayAlign(540	, 640	, AllTrim(TMP001->A1_MUN) + ' / '+ AllTrim(TMP001->A1_EST)	, oFont12:oFont	, 500, 100,, 0, 0)
oRpt:SayAlign(540	, 1690	, "Período:" 									 		, oFont12N:oFont	, 350, 100,, 0, 0)

If lTela
	oRpt:SayAlign(540	, 1810	, DToC(MV_PAR04) + " à " + DToC(MV_PAR05)			, oFont12:oFont		, 350, 100,, 0, 0)
Else
	oRpt:SayAlign(540	, 1810	, DToC(SToD(TMP001->CJ_EMISSAO)) + " à " + DToC(SToD(TMP001->CJ_EMISSAO))	, oFont12:oFont		, 350, 100,, 0, 0)
EndIf	

oRpt:SayAlign(580	, 100	, "CNPJ: " + Transform(SM0->M0_CGC, "@R 99.999.999/9999-99"), oFont12:oFont	, 500, 100,, 0, 0)
oRpt:SayAlign(580	, 500	, "CEP: " 		  						 				, oFont12N:oFont	, 100, 100,, 0, 0)
oRpt:SayAlign(580	, 570	, Transform(TMP001->A1_CEP, "@R 99.999-999")			, oFont12:oFont		, 350, 100,, 0, 0)
oRpt:SayAlign(580	, 760	, "Bairro:" 		  						 			, oFont12N:oFont	, 350, 100,, 0, 0)
oRpt:SayAlign(580	, 860	, AllTrim(TMP001->A1_BAIRRO)							, oFont12:oFont		, 450, 100,, 0, 0)
oRpt:SayAlign(580	, 1300	, "Tipo de Frete: " 							 		, oFont12N:oFont	, 350, 100,, 0, 0)
oRpt:SayAlign(580	, 1500	, If(nX == 0, "", aTipFrete[nX][2])						, oFont12:oFont		, 400, 100,, 0, 0)

oRpt:SayAlign(620	, 100	, "Telefone: " + SM0->M0_TEL        					, oFont12:oFont		, 500, 100,, 0, 0)
oRpt:SayAlign(620	, 500	, "CNPJ: "	  											, oFont12N:oFont	, 350, 100,, 0, 0)
oRpt:SayAlign(620	, 610	, Transform(TMP001->A1_CGC, "@R 99.999.999/9999-99") 	, oFont12:oFont		, 500, 100,, 0, 0)
oRpt:SayAlign(620	, 890	, "I.E: "	  											, oFont12N:oFont	, 350, 100,, 0, 0)
oRpt:SayAlign(620	, 940	, AllTrim(TMP001->A1_INSCR)								, oFont12:oFont		, 500, 100,, 0, 0)
oRpt:SayAlign(620	, 1300	, "Vendedor:"					 						, oFont12N:oFont	, 300, 100,, 0, 0)
oRpt:SayAlign(620	, 1500	, AllTrim(TMP001->A3_NOME)								, oFont12:oFont		, 650, 100,, 0, 0)

If TMP001->A1_TEL <> ""
	oRpt:SayAlign(660	, 500	, "Telefone: "	  										, oFont12N:oFont	, 300, 100,, 0, 0)
	oRpt:SayAlign(660	, 640	, AllTrim(TMP001->A1_TEL) 								, oFont12:oFont		, 300, 100,, 0, 0)
EndIf

Return Nil

/*/{Protheus.doc} AdicDiscrimItens
	(Funcao para adicionar a discriminacao dos itens)
	@type Static Function
	@author Everaldo
	@since 23/09/2021
	@version version
	@return Nil, Nulo
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function AdicDiscrimItens()

oRpt:Line(720	, 100	, 720	, 2080)		// Linha -- acima da discriminacao dos Itens
oRpt:Line(723	, 100	, 723	, 2080)
oRpt:Line(725	, 100	, 725	, 2080)

// Cabecalho das colunas dos itens
oRpt:SayAlign(760	, 100	, "Código"							 			, oFont12N:oFont	, 250	, 100,, 0, 0)
oRpt:SayAlign(760	, 250	, "Descrição do Produto" 				 		, oFont12N:oFont	, 400	, 100,, 0, 0)
oRpt:SayAlign(760	, 700	, "Un"								 			, oFont12N:oFont	, 200	, 100,, 0, 0)
oRpt:SayAlign(760	, 700	, "Qtd"							 				, oFont12N:oFont	, 250	, 100,, 1, 0)
oRpt:SayAlign(760	, 850	, "Vl.Unit"							 			, oFont12N:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(760	, 1000	, "Vl.do Item"									, oFont12N:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(760	, 1150	, "Desc.Item"						 			, oFont12N:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(760	, 1300	, "Vl.ICMS"										, oFont12N:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(760	, 1450	, "IPI"								 			, oFont12N:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(760	, 1600	, "ICMS-ST"										, oFont12N:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(760	, 1750	, "Total"							 			, oFont12N:oFont	, 300	, 100,, 1, 0)

oRpt:Line(800	, 100	, 800	, 2080)		// Linha -- abaixo da discriminacao dos Itens
oRpt:Line(803	, 100	, 803	, 2080)
oRpt:Line(805	, 100	, 805	, 2080)

Return Nil

/*/{Protheus.doc} AdicItens
	(Funcao para adicionar os itens dos servicos)
	@type Static Function
	@author Everaldo
	@since 23/09/2021
	@version version
	@param nLinha, numeric, (Referencia da linha para o item a ser considerado)
	@return Nil, Nulo
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function AdicItens(nLinha as numeric)

Local nPrcVen	:= 0 as numeric
Local nValor	:= 0 as numeric
Local nValDesc	:= 0 as numeric
Local nIcms		:= 0 as numeric
Local nIcmsSt	:= 0 as numeric
Local nIpi		:= 0 as numeric

nPrcVen 	:= xMoeda(TMP001->CK_PRCVEN,TMP001->CJ_MOEDA,MV_PAR09,TMP001->CJ_EMISSAO)
nValor 		:= xMoeda(TMP001->CK_VALOR,TMP001->CJ_MOEDA,MV_PAR09,TMP001->CJ_EMISSAO)
nValDesc 	:= xMoeda(TMP001->CK_VALDESC,TMP001->CJ_MOEDA,MV_PAR09,TMP001->CJ_EMISSAO)
nIcms		:= xMoeda(MaFisRet(VAL(TMP001->CK_ITEM), "IT_VALICM"),TMP001->CJ_MOEDA,MV_PAR09,TMP001->CJ_EMISSAO)
nIcmsSt 	:= xMoeda(MaFisRet(VAL(TMP001->CK_ITEM), "IT_VALSOL"),TMP001->CJ_MOEDA,MV_PAR09,TMP001->CJ_EMISSAO)
nIpi 		:= xMoeda(MaFisRet(VAL(TMP001->CK_ITEM), "IT_VALIPI"),TMP001->CJ_MOEDA,MV_PAR09,TMP001->CJ_EMISSAO)

nLinha += If(nLinha == 0, 850, 040)

// Detalhes dos itens na SCK
oRpt:SayAlign(nLinha	, 100	, AllTrim(TMP001->CK_PRODUTO)						 				, oFont12:oFont	, 250	, 100,, 0, 0)
oRpt:SayAlign(nLinha	, 250	, AllTrim(TMP001->B1_DESC)								 			, oFont12:oFont	, 600	, 100,, 0, 0)
oRpt:SayAlign(nLinha	, 700	, AllTrim(TMP001->CK_UM)							 				, oFont12:oFont	, 200	, 100,, 0, 0)
oRpt:SayAlign(nLinha	, 700	, Transform(ROUND(TMP001->CK_QTDVEN ,4), GetSX3Cache("CK_QTDVEN", "X3_PICTURE"))	, oFont12:oFont	, 250	, 100,, 1, 0)
oRpt:SayAlign(nLinha	, 850	, Transform(ROUND(nPrcVen ,4), GetSX3Cache("CK_PRCVEN", "X3_PICTURE"))				, oFont12:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(nLinha	, 1000	, Transform(ROUND(nValor ,4), GetSX3Cache("CK_VALOR", "X3_PICTURE"))				, oFont12:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(nLinha	, 1150	, Transform(ROUND(nValDesc ,4), GetSX3Cache("CK_VALDESC", "X3_PICTURE"))			, oFont12:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(nLinha	, 1300	, Transform(ROUND(nIcms ,4), GetSX3Cache("CK_VALDESC", "X3_PICTURE"))				, oFont12:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(nLinha	, 1450	, Transform(ROUND(nIpi ,4), GetSX3Cache("CK_VALDESC", "X3_PICTURE"))				, oFont12:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(nLinha	, 1600	, Transform(ROUND(nIcmsSt ,4), GetSX3Cache("CK_VALDESC", "X3_PICTURE"))				, oFont12:oFont	, 300	, 100,, 1, 0)
oRpt:SayAlign(nLinha	, 1750	, Transform(ROUND(nValor - nValDesc,4), GetSX3Cache("CK_VALOR", "X3_PICTURE")), oFont12:oFont	, 300	, 100,, 1, 0)

nTotVal  	+= nValor
nTotDesc 	+= nValDesc
nTotValDesc += ROUND((nValor - nValDesc),4)

Return Nil

/*/{Protheus.doc} AdicTotal
	(Funcao para adicionar os totais dos servicos)
	@type Static Function
	@author Everaldo
	@since 23/09/2021
	@version version
	@return Nil, Nulo
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function AdicTotal(nLinha as numeric)

nLinha += 040

oRpt:Line(nLinha	, 100	, nLinha	, 2080)		// Linha -- abaixo dos Itens
oRpt:Line(nLinha +3	, 100	, nLinha +3	, 2080)
oRpt:Line(nLinha +5	, 100	, nLinha +5	, 2080)

nLinha += 040

oRpt:SayAlign(nLinha	, 100	, "Valor Itens s/ Desconto:"									, oFont12N:oFont, 500, 100,, 0, 0)
oRpt:SayAlign(nLinha	, 400	, Transform(nTotVal, GetSX3Cache("CK_VALOR", "X3_PICTURE")) 	, oFont12:oFont	, 250, 100,, 1, 0)
oRpt:SayAlign(nLinha	, 900	, "Desconto dos Itens:"											, oFont12N:oFont, 500, 100,, 0, 0)
oRpt:SayAlign(nLinha	, 1150	, Transform(nTotDesc, GetSX3Cache("CK_VALOR", "X3_PICTURE")) 	, oFont12:oFont	, 250, 100,, 1, 0)
oRpt:SayAlign(nLinha	, 1500	, "Total dos Itens:"											, oFont12N:oFont, 500, 100,, 0, 0)
oRpt:SayAlign(nLinha	, 1800	, Transform(nTotValDesc, GetSX3Cache("CK_VALOR", "X3_PICTURE")) , oFont12:oFont	, 250, 100,, 1, 0)

nLinha += 040

oRpt:Line(nLinha	, 100	, nLinha	, 2080)		// Linha -- abaixo dos totais
oRpt:Line(nLinha +3	, 100	, nLinha +3	, 2080)
oRpt:Line(nLinha +5	, 100	, nLinha +5	, 2080)

nTotVal  	:= 0
nTotDesc 	:= 0
nTotValDesc := 0

Return Nil

/*/{Protheus.doc} SetLinhasPag
	(Funcao para desenhar linhas laterais da pagina)
	@type Static Function
	@author Everaldo
	@since 23/09/2021
	@version version
	@return Nil, Nulo
	@example
	(examples)
	@see (links_or_references)
	/*/

Static Function SetLinhasPag()

// Secao do cabecalho do romaneio de carga
oRpt:Line(195	, 100	, 195	, 2080)		// Linha ------
oRpt:Line(195	, 1695	, 400	, 1695)		// Linha |
oRpt:Line(198	, 100	, 198	, 2080)		// Linha ------ para ficar dupla
oRpt:Line(200	, 100	, 200	, 2080)		// Linha ------ para ficar dupla

oRpt:Line(2951	, 100	, 2951	, 2080)		// Linha ------ ultima linha do rodape
oRpt:Line(2952	, 100	, 2952	, 2080)		// Linha ------ para ficar dupla
oRpt:Line(2953	, 100	, 2953	, 2080)		// Linha ------ para ficar dupla
oRpt:Line(2954	, 100	, 2954	, 2080)		// Linha ------ para ficar dupla
oRpt:Line(2955	, 100	, 2955	, 2080)		// Linha ------ para ficar dupla

oRpt:Line(195	, 095	, 2955	, 095)		// Linha |      lateral esquerda
oRpt:Line(195	, 097	, 2955	, 097)		// Linha |      para ficar dupla
oRpt:Line(195	, 098	, 2955	, 098)		// Linha |      para ficar dupla
oRpt:Line(195	, 099	, 2955	, 099)		// Linha |      para ficar dupla
oRpt:Line(195	, 100	, 2955	, 100)		// Linha |      para ficar dupla

oRpt:Line(195	, 2080	, 2955	, 2080)		// Linha      | lateral direita
oRpt:Line(195	, 2081	, 2955	, 2081)		// Linha      | para ficar dupla
oRpt:Line(195	, 2082	, 2955	, 2082)		// Linha      | para ficar dupla
oRpt:Line(195	, 2083	, 2955	, 2083)		// Linha      | para ficar dupla
oRpt:Line(195	, 2084	, 2955	, 2084)		// Linha      | para ficar dupla

Return Nil

Static Function CalcImposto()

Local aArea     := GetArea()
Local aAreaCK   := SCK->(GetArea())
Local nItens	:= 0

// Cálculo dos impostos
// Inclui cabeçalho dos impostos
MaFisIni(	TMP001->CJ_CLIENTE,;                   // 1-Codigo Cliente/Fornecedor
			TMP001->CJ_LOJA,;                      // 2-Loja do Cliente/Fornecedor
			"C",;                                  // 3-C:Cliente , F:Fornecedor
			"N",;                                  // 4-Tipo da NF
			TMP001->CJ_TIPOCLI,;                   // 5-Tipo do Cliente/Fornecedor
			MaFisRelImp("MTR700",{"SCJ","SCK"}),;  // 6-Relacao de Impostos que suportados no arquivo
			,;                                     // 7-Tipo de complemento
			,;                                     // 8-Permite Incluir Impostos no Rodape .T./.F.
			"SB1",;                                // 9-Alias do Cadastro de Produtos - ("SBI" P/ Front Loja)
			"RFATR01")                             // 10-Nome da rotina que esta utilizando a funcao

// Inclui itens

SCK->(DbSeek(xFilial('SCK') + TMP001->CK_NUM))
While ! SCK->(EoF()) .And. SCK->CK_NUM == TMP001->CK_NUM
	// Calcula quantos itens tem o Orçamento

	nItens ++

	//Pega os tratamentos de impostos
	
	MaFisAdd(   SCK->CK_PRODUTO,;                     // 1-Codigo do Produto                 ( Obrigatorio )
				SCK->CK_TES,;                         // 2-Codigo do TES                     ( Opcional )
				SCK->CK_QTDVEN,;                      // 3-Quantidade                     ( Obrigatorio )
				SCK->CK_PRCVEN,;                      // 4-Preco Unitario                 ( Obrigatorio )
				SCK->CK_VALDESC,;                     // 5 desconto
				"",;                     			  // 6-Numero da NF Original             ( Devolucao/Benef )
				"",;                    			  // 7-Serie da NF Original             ( Devolucao/Benef )
				0,;                                    // 8-RecNo da NF Original no arq SD1/SD2
				0,;                					  // 9-Valor do Frete do Item         ( Opcional )
				0,;            						  // 10-Valor da Despesa do item         ( Opcional )
				0,;            						  // 11-Valor do Seguro do item         ( Opcional )
				0,;                                   // 12-Valor do Frete Autonomo         ( Opcional )
				SCK->CK_VALOR,;                       // 13-Valor da Mercadoria             ( Obrigatorio )
				0,;									  // 14-Valor da Embalagem ( Opiconal )
		 		, , , , , , , , , , , , ,;
		 	) 					  // 28-Classificacao fiscal)                                 // 16-RecNo do SF4
		
	SCK->(DbSkip())
EndDo

// Calcula a quantidade de páginas do orçamento

nTotPaginas := Int(nItens / 36) + 1
nPaginas    := 0

RestArea(aAreaCK)
RestArea(aArea)

Return Nil
